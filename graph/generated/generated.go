// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"server/graph/model"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Notification() NotificationResolver
	Paiement() PaiementResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
	Auth         func(ctx context.Context, obj interface{}, next graphql.Resolver, requires *model.Role) (res interface{}, err error)
	AuthCommerce func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	AuthWithPin  func(ctx context.Context, obj interface{}, next graphql.Resolver, requires *model.Role) (res interface{}, err error)
	Owner        func(ctx context.Context, obj interface{}, next graphql.Resolver, rules []*model.OwnerRule) (res interface{}, err error)
	TokenVerify  func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Adress struct {
		IsChosed func(childComplexity int) int
		Location func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	Agency struct {
		Address   func(childComplexity int) int
		City      func(childComplexity int) int
		Country   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Status    func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	BirthDateOut struct {
		Day   func(childComplexity int) int
		Iso   func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	ChartData struct {
		Chart                 func(childComplexity int) int
		CurrentTotal          func(childComplexity int) int
		FormerTotal           func(childComplexity int) int
		IsPositive            func(childComplexity int) int
		PourcentageDifference func(childComplexity int) int
	}

	Enterprise struct {
		AbregedLibele        func(childComplexity int) int
		Address              func(childComplexity int) int
		Country              func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Creator              func(childComplexity int) int
		DefaultEnterprise    func(childComplexity int) int
		Description          func(childComplexity int) int
		Email                func(childComplexity int) int
		ID                   func(childComplexity int) int
		LogoURL              func(childComplexity int) int
		Name                 func(childComplexity int) int
		Person               func(childComplexity int) int
		Phone                func(childComplexity int) int
		PrivateKey           func(childComplexity int) int
		PublishableKey       func(childComplexity int) int
		Rccm                 func(childComplexity int) int
		Sector               func(childComplexity int) int
		SelfShippingProduct  func(childComplexity int) int
		SellingPhysicalGoods func(childComplexity int) int
		ShippingDelay        func(childComplexity int) int
		TransactionLibele    func(childComplexity int) int
		Type                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		WalletPublicKey      func(childComplexity int) int
		WalletSecretKey      func(childComplexity int) int
		Website              func(childComplexity int) int
	}

	EnterpriseSmall struct {
		Address         func(childComplexity int) int
		Country         func(childComplexity int) int
		ID              func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Name            func(childComplexity int) int
		WalletPublicKey func(childComplexity int) int
		Website         func(childComplexity int) int
	}

	File struct {
		Encoding func(childComplexity int) int
		Filename func(childComplexity int) int
		Mimetype func(childComplexity int) int
	}

	Keypair struct {
		PublicKey func(childComplexity int) int
		SecretKey func(childComplexity int) int
	}

	Location struct {
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
	}

	Mutation struct {
		AddAGency                        func(childComplexity int, agency model.AgencyInpyt, pinCode string) int
		AddTopUp                         func(childComplexity int, topup model.TopUpInput, pinCode string) int
		AddWithDraw                      func(childComplexity int, withdraw model.WithdrawInput, pinCode string) int
		AssignRole                       func(childComplexity int, userID string, role string, pinCode string, token string) int
		AuthenticateForPayment           func(childComplexity int, amount float64, ref *string) int
		CancelTransactionAgent           func(childComplexity int, transactionID *string, typeArg *model.PaymentType, pinCode string) int
		CancelTransactionEnterprise      func(childComplexity int, enterpriseID string, pinCode string, transactionID string) int
		CancelTransactionUser            func(childComplexity int, transactionID *string, typeArg *model.PaymentType, pinCode string) int
		ChangeDefaultEnterprise          func(childComplexity int, enterpriseID string) int
		ChangePinCode                    func(childComplexity int, newPin *string) int
		ConfirmTransactionAgent          func(childComplexity int, transactionID string, typeArg model.PaymentType, token string, pinCode string) int
		Connect                          func(childComplexity int, token string) int
		CreateContact                    func(childComplexity int, contact string) int
		CreateEnterprise                 func(childComplexity int, enterprise model.EnterpriseInput) int
		CreateTransfer                   func(childComplexity int, address *string, token string, amount float64, pinCode string, destinationUser string) int
		CreateUser                       func(childComplexity int, user *model.UserInput) int
		DeleteUser                       func(childComplexity int) int
		PayEnterprise                    func(childComplexity int, enterpriseID string, amount float64, pinCode string) int
		PayUnConfirmedTransaction        func(childComplexity int, enterpriseID string, pinCode string, transactionID string) int
		RecreateEnterprisePrivateKey     func(childComplexity int, enterpriseID string, pinCode string) int
		RecreateEnterprisePublishableKey func(childComplexity int, enterpriseID string, pinCode string) int
		RefundTransaction                func(childComplexity int, enterpriseID string, pinCode string, transactionID string) int
		RemoveContact                    func(childComplexity int, contactID string) int
		RemoveEnterprise                 func(childComplexity int, enterpriseID string, pinCode string) int
		ReportTransaction                func(childComplexity int, transactionID string, message string) int
		SendEmail                        func(childComplexity int, email *model.EmailInput) int
		SetAllNotificationToRead         func(childComplexity int) int
		SetIsOnline                      func(childComplexity int, toggle *bool) int
		SuscribeToNewsLetter             func(childComplexity int, email string) int
		TransferMoneyEnterprise          func(childComplexity int, enterpriseID string, pinCode string, publicKey string, amount float64) int
		UnassignRole                     func(childComplexity int, userID string, role string, pinCode string, token string) int
		UpdateEnterpriseInformation      func(childComplexity int, enterpriseID string, rccm string, sector string, website *string, description *string) int
		UpdateEnterpriseType             func(childComplexity int, enterpriseID string, typeArg string, country string) int
		UpdateExecutionInformation       func(childComplexity int, enterpriseID string, sellingPyshicalGoods *bool, selfShipping *bool, shippingDelay *string) int
		UpdateFcmToken                   func(childComplexity int, fcmToken *string) int
		UpdatePersonnalInformation       func(childComplexity int, enterpriseID string, firstName string, lastName string, email string, address string, city string, state string, zip string) int
		UpdateProfilePicture             func(childComplexity int, link string) int
		UpdatePublicInformation          func(childComplexity int, enterpriseID string, name string, libelle string, libelleAbreged string, email *string, phone string) int
		UploadFile                       func(childComplexity int, file graphql.Upload, typeArg string) int
	}

	Notification struct {
		CreatedAt func(childComplexity int) int
		From      func(childComplexity int) int
		ID        func(childComplexity int) int
		ImgURL    func(childComplexity int) int
		IsRead    func(childComplexity int) int
		Text      func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	Paiement struct {
		Agency          func(childComplexity int) int
		AgencyID        func(childComplexity int) int
		Amount          func(childComplexity int) int
		Cancellor       func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Creator         func(childComplexity int) int
		Description     func(childComplexity int) int
		Destination     func(childComplexity int) int
		DestinationUser func(childComplexity int) int
		Enterprise      func(childComplexity int) int
		EnterpriseID    func(childComplexity int) int
		Fee             func(childComplexity int) int
		FeeEnterprise   func(childComplexity int) int
		ID              func(childComplexity int) int
		ShortID         func(childComplexity int) int
		Status          func(childComplexity int) int
		Token           func(childComplexity int) int
		TransactionID   func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		Validator       func(childComplexity int) int
	}

	Person struct {
		Address   func(childComplexity int) int
		City      func(childComplexity int) int
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		LastName  func(childComplexity int) int
		State     func(childComplexity int) int
		Zip       func(childComplexity int) int
	}

	Query struct {
		GetActivity                             func(childComplexity int) int
		GetAllContactNotAdded                   func(childComplexity int, searchText string) int
		GetAllParticipatingTransactions         func(childComplexity int) int
		GetAllTransactionByEnterpriseID         func(childComplexity int, enterpriseID string, from string, to string, limit float64, skip float64) int
		GetAllUserContact                       func(childComplexity int, searchText string) int
		GetAllUserEnterprise                    func(childComplexity int) int
		GetEnterpriseBalance                    func(childComplexity int, enterpriseID string) int
		GetEntrepriseByID                       func(childComplexity int, enterpriseID string) int
		GetFailedTransactionByEnterpriseID      func(childComplexity int, enterpriseID string, from string, to string, limit float64, skip float64) int
		GetNonCapturedTransactionByEnterpriseID func(childComplexity int, enterpriseID string, from string, to string, limit float64, skip float64) int
		GetPDF                                  func(childComplexity int, enterpriseID string) int
		GetProfilBrutChartData                  func(childComplexity int, enterpriseID string, from string, to string) int
		GetProfilNetChartData                   func(childComplexity int, enterpriseID string, from string, to string) int
		GetProfilNonCarpturedChartData          func(childComplexity int, enterpriseID string, from string, to string) int
		GetQROwner                              func(childComplexity int, qrcode string) int
		GetRefundedTransactionByEnterpriseID    func(childComplexity int, enterpriseID string, from string, to string, limit float64, skip float64) int
		GetSuccessFullTransactionByEnterpriseID func(childComplexity int, enterpriseID string, from string, to string, limit float64, skip float64) int
		GetTransactionByID                      func(childComplexity int, id string) int
		GetTransactionByIDAgent                 func(childComplexity int, id string) int
		GetTransactionByIDUnauthed              func(childComplexity int, id string) int
		GetselfEmployedPDF                      func(childComplexity int) int
		LoadBalance                             func(childComplexity int) int
		LoadNotification                        func(childComplexity int) int
		LoadNotificationCount                   func(childComplexity int) int
		LoadQRCode                              func(childComplexity int) int
		LoadTokenSupply                         func(childComplexity int, token string) int
		RetrieveAllAgenciesTransactions         func(childComplexity int) int
		RetrieveAllAgnecies                     func(childComplexity int) int
		SearchUser                              func(childComplexity int, searchText *string) int
		UserExist                               func(childComplexity int, uid string) int
		UsersExist                              func(childComplexity int) int
	}

	RatingUser struct {
		RatingCount func(childComplexity int) int
		RatingTotal func(childComplexity int) int
	}

	Subscription struct {
		ContactAdded      func(childComplexity int, listener string) int
		NotificationAdded func(childComplexity int, listener string) int
		TransactionPayed  func(childComplexity int, id string) int
	}

	TransactionWithPageInfo struct {
		PageTotal    func(childComplexity int) int
		Transactions func(childComplexity int) int
	}

	User struct {
		Adresses               func(childComplexity int) int
		BirthDate              func(childComplexity int) int
		Contacts               func(childComplexity int) int
		Country                func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		Currency               func(childComplexity int) int
		DefaultCurrency        func(childComplexity int) int
		DefaultMethod          func(childComplexity int) int
		Deleted                func(childComplexity int) int
		Email                  func(childComplexity int) int
		FcmToken               func(childComplexity int) int
		Fee                    func(childComplexity int) int
		FirebaseUID            func(childComplexity int) int
		FirstName              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IndentityStatus        func(childComplexity int) int
		IsOnline               func(childComplexity int) int
		Keypair                func(childComplexity int) int
		LastName               func(childComplexity int) int
		NotificationPermission func(childComplexity int) int
		Permissions            func(childComplexity int) int
		Phonenumber            func(childComplexity int) int
		PhotoURL               func(childComplexity int) int
		PinCode                func(childComplexity int) int
		Rating                 func(childComplexity int) int
		ResidenceProofStatus   func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		Wallet                 func(childComplexity int) int
	}

	UserCreated struct {
		CustomToken func(childComplexity int) int
		User        func(childComplexity int) int
	}

	UserSmall struct {
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		Keypair   func(childComplexity int) int
		LastName  func(childComplexity int) int
		PhotoURL  func(childComplexity int) int
	}

	Wallet struct {
		Address  func(childComplexity int) int
		Amount   func(childComplexity int) int
		IsFrozen func(childComplexity int) int
	}
}

type MutationResolver interface {
	Connect(ctx context.Context, token string) (string, error)
	CreateUser(ctx context.Context, user *model.UserInput) (*model.UserCreated, error)
	DeleteUser(ctx context.Context) (bool, error)
	SendEmail(ctx context.Context, email *model.EmailInput) (bool, error)
	SuscribeToNewsLetter(ctx context.Context, email string) (bool, error)
	CreateTransfer(ctx context.Context, address *string, token string, amount float64, pinCode string, destinationUser string) (bool, error)
	UpdateProfilePicture(ctx context.Context, link string) (bool, error)
	CreateContact(ctx context.Context, contact string) (bool, error)
	RemoveContact(ctx context.Context, contactID string) (bool, error)
	AddAGency(ctx context.Context, agency model.AgencyInpyt, pinCode string) (string, error)
	AddWithDraw(ctx context.Context, withdraw model.WithdrawInput, pinCode string) (string, error)
	AddTopUp(ctx context.Context, topup model.TopUpInput, pinCode string) (string, error)
	ConfirmTransactionAgent(ctx context.Context, transactionID string, typeArg model.PaymentType, token string, pinCode string) (bool, error)
	CancelTransactionAgent(ctx context.Context, transactionID *string, typeArg *model.PaymentType, pinCode string) (bool, error)
	CancelTransactionUser(ctx context.Context, transactionID *string, typeArg *model.PaymentType, pinCode string) (bool, error)
	SetIsOnline(ctx context.Context, toggle *bool) (bool, error)
	UpdateFcmToken(ctx context.Context, fcmToken *string) (bool, error)
	ChangePinCode(ctx context.Context, newPin *string) (bool, error)
	SetAllNotificationToRead(ctx context.Context) (bool, error)
	UploadFile(ctx context.Context, file graphql.Upload, typeArg string) (*model.User, error)
	ReportTransaction(ctx context.Context, transactionID string, message string) (*bool, error)
	AssignRole(ctx context.Context, userID string, role string, pinCode string, token string) (*bool, error)
	UnassignRole(ctx context.Context, userID string, role string, pinCode string, token string) (*bool, error)
	CreateEnterprise(ctx context.Context, enterprise model.EnterpriseInput) (*model.Enterprise, error)
	AuthenticateForPayment(ctx context.Context, amount float64, ref *string) (model.QRCodeOwner, error)
	RecreateEnterprisePublishableKey(ctx context.Context, enterpriseID string, pinCode string) ([]*model.Enterprise, error)
	RecreateEnterprisePrivateKey(ctx context.Context, enterpriseID string, pinCode string) ([]*model.Enterprise, error)
	RemoveEnterprise(ctx context.Context, enterpriseID string, pinCode string) ([]*model.Enterprise, error)
	ChangeDefaultEnterprise(ctx context.Context, enterpriseID string) ([]*model.Enterprise, error)
	UpdateEnterpriseType(ctx context.Context, enterpriseID string, typeArg string, country string) ([]*model.Enterprise, error)
	UpdatePersonnalInformation(ctx context.Context, enterpriseID string, firstName string, lastName string, email string, address string, city string, state string, zip string) ([]*model.Enterprise, error)
	UpdateEnterpriseInformation(ctx context.Context, enterpriseID string, rccm string, sector string, website *string, description *string) ([]*model.Enterprise, error)
	UpdateExecutionInformation(ctx context.Context, enterpriseID string, sellingPyshicalGoods *bool, selfShipping *bool, shippingDelay *string) ([]*model.Enterprise, error)
	UpdatePublicInformation(ctx context.Context, enterpriseID string, name string, libelle string, libelleAbreged string, email *string, phone string) ([]*model.Enterprise, error)
	PayUnConfirmedTransaction(ctx context.Context, enterpriseID string, pinCode string, transactionID string) (*model.Paiement, error)
	PayEnterprise(ctx context.Context, enterpriseID string, amount float64, pinCode string) (*model.Paiement, error)
	RefundTransaction(ctx context.Context, enterpriseID string, pinCode string, transactionID string) (bool, error)
	CancelTransactionEnterprise(ctx context.Context, enterpriseID string, pinCode string, transactionID string) (bool, error)
	TransferMoneyEnterprise(ctx context.Context, enterpriseID string, pinCode string, publicKey string, amount float64) (bool, error)
}
type NotificationResolver interface {
	From(ctx context.Context, obj *model.Notification) (*model.UserSmall, error)
}
type PaiementResolver interface {
	Creator(ctx context.Context, obj *model.Paiement) (*model.UserSmall, error)

	Amount(ctx context.Context, obj *model.Paiement) (float64, error)
	Fee(ctx context.Context, obj *model.Paiement) (*float64, error)
	FeeEnterprise(ctx context.Context, obj *model.Paiement) (*float64, error)
	Cancellor(ctx context.Context, obj *model.Paiement) (*model.UserSmall, error)
	Agency(ctx context.Context, obj *model.Paiement) (*model.Agency, error)

	Validator(ctx context.Context, obj *model.Paiement) (*model.UserSmall, error)

	DestinationUser(ctx context.Context, obj *model.Paiement) (*model.UserSmall, error)
	Enterprise(ctx context.Context, obj *model.Paiement) (*model.EnterpriseSmall, error)
}
type QueryResolver interface {
	UserExist(ctx context.Context, uid string) (bool, error)
	UsersExist(ctx context.Context) (*model.User, error)
	LoadNotification(ctx context.Context) ([]*model.Notification, error)
	LoadNotificationCount(ctx context.Context) (float64, error)
	LoadBalance(ctx context.Context) (*model.Wallet, error)
	SearchUser(ctx context.Context, searchText *string) ([]*model.UserSmall, error)
	GetAllUserContact(ctx context.Context, searchText string) ([]*model.UserSmall, error)
	GetAllContactNotAdded(ctx context.Context, searchText string) ([]*model.UserSmall, error)
	GetActivity(ctx context.Context) ([]*model.Paiement, error)
	LoadQRCode(ctx context.Context) (string, error)
	LoadTokenSupply(ctx context.Context, token string) (int, error)
	RetrieveAllAgnecies(ctx context.Context) ([]*model.Agency, error)
	RetrieveAllAgenciesTransactions(ctx context.Context) ([]*model.Paiement, error)
	GetAllParticipatingTransactions(ctx context.Context) ([]*model.Paiement, error)
	GetQROwner(ctx context.Context, qrcode string) (model.QRCodeOwner, error)
	GetTransactionByIDUnauthed(ctx context.Context, id string) (*model.Paiement, error)
	GetTransactionByID(ctx context.Context, id string) (*model.Paiement, error)
	GetTransactionByIDAgent(ctx context.Context, id string) (*model.Paiement, error)
	GetselfEmployedPDF(ctx context.Context) (string, error)
	GetAllUserEnterprise(ctx context.Context) ([]*model.Enterprise, error)
	GetAllTransactionByEnterpriseID(ctx context.Context, enterpriseID string, from string, to string, limit float64, skip float64) (*model.TransactionWithPageInfo, error)
	GetSuccessFullTransactionByEnterpriseID(ctx context.Context, enterpriseID string, from string, to string, limit float64, skip float64) (*model.TransactionWithPageInfo, error)
	GetRefundedTransactionByEnterpriseID(ctx context.Context, enterpriseID string, from string, to string, limit float64, skip float64) (*model.TransactionWithPageInfo, error)
	GetNonCapturedTransactionByEnterpriseID(ctx context.Context, enterpriseID string, from string, to string, limit float64, skip float64) (*model.TransactionWithPageInfo, error)
	GetFailedTransactionByEnterpriseID(ctx context.Context, enterpriseID string, from string, to string, limit float64, skip float64) (*model.TransactionWithPageInfo, error)
	GetProfilNetChartData(ctx context.Context, enterpriseID string, from string, to string) (*model.ChartData, error)
	GetProfilBrutChartData(ctx context.Context, enterpriseID string, from string, to string) (*model.ChartData, error)
	GetProfilNonCarpturedChartData(ctx context.Context, enterpriseID string, from string, to string) (*model.ChartData, error)
	GetEnterpriseBalance(ctx context.Context, enterpriseID string) (float64, error)
	GetEntrepriseByID(ctx context.Context, enterpriseID string) (*model.Enterprise, error)
	GetPDF(ctx context.Context, enterpriseID string) (string, error)
}
type SubscriptionResolver interface {
	NotificationAdded(ctx context.Context, listener string) (<-chan *model.Notification, error)
	TransactionPayed(ctx context.Context, id string) (<-chan *model.Paiement, error)
	ContactAdded(ctx context.Context, listener string) (<-chan *model.Notification, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Adress.is_chosed":
		if e.complexity.Adress.IsChosed == nil {
			break
		}

		return e.complexity.Adress.IsChosed(childComplexity), true

	case "Adress.location":
		if e.complexity.Adress.Location == nil {
			break
		}

		return e.complexity.Adress.Location(childComplexity), true

	case "Adress.title":
		if e.complexity.Adress.Title == nil {
			break
		}

		return e.complexity.Adress.Title(childComplexity), true

	case "Agency.address":
		if e.complexity.Agency.Address == nil {
			break
		}

		return e.complexity.Agency.Address(childComplexity), true

	case "Agency.city":
		if e.complexity.Agency.City == nil {
			break
		}

		return e.complexity.Agency.City(childComplexity), true

	case "Agency.country":
		if e.complexity.Agency.Country == nil {
			break
		}

		return e.complexity.Agency.Country(childComplexity), true

	case "Agency.createdAt":
		if e.complexity.Agency.CreatedAt == nil {
			break
		}

		return e.complexity.Agency.CreatedAt(childComplexity), true

	case "Agency._id":
		if e.complexity.Agency.ID == nil {
			break
		}

		return e.complexity.Agency.ID(childComplexity), true

	case "Agency.status":
		if e.complexity.Agency.Status == nil {
			break
		}

		return e.complexity.Agency.Status(childComplexity), true

	case "Agency.title":
		if e.complexity.Agency.Title == nil {
			break
		}

		return e.complexity.Agency.Title(childComplexity), true

	case "BirthDateOut.day":
		if e.complexity.BirthDateOut.Day == nil {
			break
		}

		return e.complexity.BirthDateOut.Day(childComplexity), true

	case "BirthDateOut.iso":
		if e.complexity.BirthDateOut.Iso == nil {
			break
		}

		return e.complexity.BirthDateOut.Iso(childComplexity), true

	case "BirthDateOut.month":
		if e.complexity.BirthDateOut.Month == nil {
			break
		}

		return e.complexity.BirthDateOut.Month(childComplexity), true

	case "BirthDateOut.year":
		if e.complexity.BirthDateOut.Year == nil {
			break
		}

		return e.complexity.BirthDateOut.Year(childComplexity), true

	case "ChartData.chart":
		if e.complexity.ChartData.Chart == nil {
			break
		}

		return e.complexity.ChartData.Chart(childComplexity), true

	case "ChartData.currentTotal":
		if e.complexity.ChartData.CurrentTotal == nil {
			break
		}

		return e.complexity.ChartData.CurrentTotal(childComplexity), true

	case "ChartData.formerTotal":
		if e.complexity.ChartData.FormerTotal == nil {
			break
		}

		return e.complexity.ChartData.FormerTotal(childComplexity), true

	case "ChartData.isPositive":
		if e.complexity.ChartData.IsPositive == nil {
			break
		}

		return e.complexity.ChartData.IsPositive(childComplexity), true

	case "ChartData.pourcentageDifference":
		if e.complexity.ChartData.PourcentageDifference == nil {
			break
		}

		return e.complexity.ChartData.PourcentageDifference(childComplexity), true

	case "Enterprise.abregedLibele":
		if e.complexity.Enterprise.AbregedLibele == nil {
			break
		}

		return e.complexity.Enterprise.AbregedLibele(childComplexity), true

	case "Enterprise.address":
		if e.complexity.Enterprise.Address == nil {
			break
		}

		return e.complexity.Enterprise.Address(childComplexity), true

	case "Enterprise.country":
		if e.complexity.Enterprise.Country == nil {
			break
		}

		return e.complexity.Enterprise.Country(childComplexity), true

	case "Enterprise.createdAt":
		if e.complexity.Enterprise.CreatedAt == nil {
			break
		}

		return e.complexity.Enterprise.CreatedAt(childComplexity), true

	case "Enterprise.creator":
		if e.complexity.Enterprise.Creator == nil {
			break
		}

		return e.complexity.Enterprise.Creator(childComplexity), true

	case "Enterprise.default_enterprise":
		if e.complexity.Enterprise.DefaultEnterprise == nil {
			break
		}

		return e.complexity.Enterprise.DefaultEnterprise(childComplexity), true

	case "Enterprise.description":
		if e.complexity.Enterprise.Description == nil {
			break
		}

		return e.complexity.Enterprise.Description(childComplexity), true

	case "Enterprise.email":
		if e.complexity.Enterprise.Email == nil {
			break
		}

		return e.complexity.Enterprise.Email(childComplexity), true

	case "Enterprise._id":
		if e.complexity.Enterprise.ID == nil {
			break
		}

		return e.complexity.Enterprise.ID(childComplexity), true

	case "Enterprise.logoUrl":
		if e.complexity.Enterprise.LogoURL == nil {
			break
		}

		return e.complexity.Enterprise.LogoURL(childComplexity), true

	case "Enterprise.name":
		if e.complexity.Enterprise.Name == nil {
			break
		}

		return e.complexity.Enterprise.Name(childComplexity), true

	case "Enterprise.person":
		if e.complexity.Enterprise.Person == nil {
			break
		}

		return e.complexity.Enterprise.Person(childComplexity), true

	case "Enterprise.phone":
		if e.complexity.Enterprise.Phone == nil {
			break
		}

		return e.complexity.Enterprise.Phone(childComplexity), true

	case "Enterprise.private_key":
		if e.complexity.Enterprise.PrivateKey == nil {
			break
		}

		return e.complexity.Enterprise.PrivateKey(childComplexity), true

	case "Enterprise.publishableKey":
		if e.complexity.Enterprise.PublishableKey == nil {
			break
		}

		return e.complexity.Enterprise.PublishableKey(childComplexity), true

	case "Enterprise.rccm":
		if e.complexity.Enterprise.Rccm == nil {
			break
		}

		return e.complexity.Enterprise.Rccm(childComplexity), true

	case "Enterprise.sector":
		if e.complexity.Enterprise.Sector == nil {
			break
		}

		return e.complexity.Enterprise.Sector(childComplexity), true

	case "Enterprise.selfShippingProduct":
		if e.complexity.Enterprise.SelfShippingProduct == nil {
			break
		}

		return e.complexity.Enterprise.SelfShippingProduct(childComplexity), true

	case "Enterprise.sellingPhysicalGoods":
		if e.complexity.Enterprise.SellingPhysicalGoods == nil {
			break
		}

		return e.complexity.Enterprise.SellingPhysicalGoods(childComplexity), true

	case "Enterprise.shippingDelay":
		if e.complexity.Enterprise.ShippingDelay == nil {
			break
		}

		return e.complexity.Enterprise.ShippingDelay(childComplexity), true

	case "Enterprise.transactionLibele":
		if e.complexity.Enterprise.TransactionLibele == nil {
			break
		}

		return e.complexity.Enterprise.TransactionLibele(childComplexity), true

	case "Enterprise.type":
		if e.complexity.Enterprise.Type == nil {
			break
		}

		return e.complexity.Enterprise.Type(childComplexity), true

	case "Enterprise.updatedAt":
		if e.complexity.Enterprise.UpdatedAt == nil {
			break
		}

		return e.complexity.Enterprise.UpdatedAt(childComplexity), true

	case "Enterprise.walletPublicKey":
		if e.complexity.Enterprise.WalletPublicKey == nil {
			break
		}

		return e.complexity.Enterprise.WalletPublicKey(childComplexity), true

	case "Enterprise.walletSecretKey":
		if e.complexity.Enterprise.WalletSecretKey == nil {
			break
		}

		return e.complexity.Enterprise.WalletSecretKey(childComplexity), true

	case "Enterprise.website":
		if e.complexity.Enterprise.Website == nil {
			break
		}

		return e.complexity.Enterprise.Website(childComplexity), true

	case "EnterpriseSmall.address":
		if e.complexity.EnterpriseSmall.Address == nil {
			break
		}

		return e.complexity.EnterpriseSmall.Address(childComplexity), true

	case "EnterpriseSmall.country":
		if e.complexity.EnterpriseSmall.Country == nil {
			break
		}

		return e.complexity.EnterpriseSmall.Country(childComplexity), true

	case "EnterpriseSmall._id":
		if e.complexity.EnterpriseSmall.ID == nil {
			break
		}

		return e.complexity.EnterpriseSmall.ID(childComplexity), true

	case "EnterpriseSmall.logoUrl":
		if e.complexity.EnterpriseSmall.LogoURL == nil {
			break
		}

		return e.complexity.EnterpriseSmall.LogoURL(childComplexity), true

	case "EnterpriseSmall.name":
		if e.complexity.EnterpriseSmall.Name == nil {
			break
		}

		return e.complexity.EnterpriseSmall.Name(childComplexity), true

	case "EnterpriseSmall.walletPublicKey":
		if e.complexity.EnterpriseSmall.WalletPublicKey == nil {
			break
		}

		return e.complexity.EnterpriseSmall.WalletPublicKey(childComplexity), true

	case "EnterpriseSmall.website":
		if e.complexity.EnterpriseSmall.Website == nil {
			break
		}

		return e.complexity.EnterpriseSmall.Website(childComplexity), true

	case "File.encoding":
		if e.complexity.File.Encoding == nil {
			break
		}

		return e.complexity.File.Encoding(childComplexity), true

	case "File.filename":
		if e.complexity.File.Filename == nil {
			break
		}

		return e.complexity.File.Filename(childComplexity), true

	case "File.mimetype":
		if e.complexity.File.Mimetype == nil {
			break
		}

		return e.complexity.File.Mimetype(childComplexity), true

	case "Keypair.publicKey":
		if e.complexity.Keypair.PublicKey == nil {
			break
		}

		return e.complexity.Keypair.PublicKey(childComplexity), true

	case "Keypair.secretKey":
		if e.complexity.Keypair.SecretKey == nil {
			break
		}

		return e.complexity.Keypair.SecretKey(childComplexity), true

	case "Location.latitude":
		if e.complexity.Location.Latitude == nil {
			break
		}

		return e.complexity.Location.Latitude(childComplexity), true

	case "Location.longitude":
		if e.complexity.Location.Longitude == nil {
			break
		}

		return e.complexity.Location.Longitude(childComplexity), true

	case "Mutation.addAGency":
		if e.complexity.Mutation.AddAGency == nil {
			break
		}

		args, err := ec.field_Mutation_addAGency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAGency(childComplexity, args["agency"].(model.AgencyInpyt), args["pinCode"].(string)), true

	case "Mutation.addTopUp":
		if e.complexity.Mutation.AddTopUp == nil {
			break
		}

		args, err := ec.field_Mutation_addTopUp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTopUp(childComplexity, args["topup"].(model.TopUpInput), args["pinCode"].(string)), true

	case "Mutation.addWithDraw":
		if e.complexity.Mutation.AddWithDraw == nil {
			break
		}

		args, err := ec.field_Mutation_addWithDraw_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddWithDraw(childComplexity, args["withdraw"].(model.WithdrawInput), args["pinCode"].(string)), true

	case "Mutation.assignRole":
		if e.complexity.Mutation.AssignRole == nil {
			break
		}

		args, err := ec.field_Mutation_assignRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRole(childComplexity, args["userId"].(string), args["role"].(string), args["pinCode"].(string), args["token"].(string)), true

	case "Mutation.authenticateForPayment":
		if e.complexity.Mutation.AuthenticateForPayment == nil {
			break
		}

		args, err := ec.field_Mutation_authenticateForPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthenticateForPayment(childComplexity, args["amount"].(float64), args["ref"].(*string)), true

	case "Mutation.cancelTransactionAgent":
		if e.complexity.Mutation.CancelTransactionAgent == nil {
			break
		}

		args, err := ec.field_Mutation_cancelTransactionAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelTransactionAgent(childComplexity, args["transaction_id"].(*string), args["type"].(*model.PaymentType), args["pinCode"].(string)), true

	case "Mutation.cancelTransactionEnterprise":
		if e.complexity.Mutation.CancelTransactionEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_cancelTransactionEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelTransactionEnterprise(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string), args["transactionId"].(string)), true

	case "Mutation.cancelTransactionUser":
		if e.complexity.Mutation.CancelTransactionUser == nil {
			break
		}

		args, err := ec.field_Mutation_cancelTransactionUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelTransactionUser(childComplexity, args["transaction_id"].(*string), args["type"].(*model.PaymentType), args["pinCode"].(string)), true

	case "Mutation.changeDefaultEnterprise":
		if e.complexity.Mutation.ChangeDefaultEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_changeDefaultEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeDefaultEnterprise(childComplexity, args["enterpriseId"].(string)), true

	case "Mutation.changePinCode":
		if e.complexity.Mutation.ChangePinCode == nil {
			break
		}

		args, err := ec.field_Mutation_changePinCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePinCode(childComplexity, args["newPin"].(*string)), true

	case "Mutation.confirmTransactionAgent":
		if e.complexity.Mutation.ConfirmTransactionAgent == nil {
			break
		}

		args, err := ec.field_Mutation_confirmTransactionAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmTransactionAgent(childComplexity, args["transaction_id"].(string), args["type"].(model.PaymentType), args["token"].(string), args["pinCode"].(string)), true

	case "Mutation.connect":
		if e.complexity.Mutation.Connect == nil {
			break
		}

		args, err := ec.field_Mutation_connect_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Connect(childComplexity, args["token"].(string)), true

	case "Mutation.createContact":
		if e.complexity.Mutation.CreateContact == nil {
			break
		}

		args, err := ec.field_Mutation_createContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContact(childComplexity, args["contact"].(string)), true

	case "Mutation.createEnterprise":
		if e.complexity.Mutation.CreateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_createEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEnterprise(childComplexity, args["enterprise"].(model.EnterpriseInput)), true

	case "Mutation.createTransfer":
		if e.complexity.Mutation.CreateTransfer == nil {
			break
		}

		args, err := ec.field_Mutation_createTransfer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTransfer(childComplexity, args["address"].(*string), args["token"].(string), args["amount"].(float64), args["pinCode"].(string), args["destinationUser"].(string)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["user"].(*model.UserInput)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		return e.complexity.Mutation.DeleteUser(childComplexity), true

	case "Mutation.payEnterprise":
		if e.complexity.Mutation.PayEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_payEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PayEnterprise(childComplexity, args["enterpriseId"].(string), args["amount"].(float64), args["pinCode"].(string)), true

	case "Mutation.payUnConfirmedTransaction":
		if e.complexity.Mutation.PayUnConfirmedTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_payUnConfirmedTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PayUnConfirmedTransaction(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string), args["transactionId"].(string)), true

	case "Mutation.recreateEnterprisePrivateKey":
		if e.complexity.Mutation.RecreateEnterprisePrivateKey == nil {
			break
		}

		args, err := ec.field_Mutation_recreateEnterprisePrivateKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecreateEnterprisePrivateKey(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string)), true

	case "Mutation.recreateEnterprisePublishableKey":
		if e.complexity.Mutation.RecreateEnterprisePublishableKey == nil {
			break
		}

		args, err := ec.field_Mutation_recreateEnterprisePublishableKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecreateEnterprisePublishableKey(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string)), true

	case "Mutation.refundTransaction":
		if e.complexity.Mutation.RefundTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_refundTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefundTransaction(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string), args["transactionId"].(string)), true

	case "Mutation.removeContact":
		if e.complexity.Mutation.RemoveContact == nil {
			break
		}

		args, err := ec.field_Mutation_removeContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveContact(childComplexity, args["contact_id"].(string)), true

	case "Mutation.removeEnterprise":
		if e.complexity.Mutation.RemoveEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_removeEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveEnterprise(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string)), true

	case "Mutation.reportTransaction":
		if e.complexity.Mutation.ReportTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_reportTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportTransaction(childComplexity, args["transaction_id"].(string), args["message"].(string)), true

	case "Mutation.sendEmail":
		if e.complexity.Mutation.SendEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendEmail(childComplexity, args["email"].(*model.EmailInput)), true

	case "Mutation.setAllNotificationToRead":
		if e.complexity.Mutation.SetAllNotificationToRead == nil {
			break
		}

		return e.complexity.Mutation.SetAllNotificationToRead(childComplexity), true

	case "Mutation.setIsOnline":
		if e.complexity.Mutation.SetIsOnline == nil {
			break
		}

		args, err := ec.field_Mutation_setIsOnline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetIsOnline(childComplexity, args["toggle"].(*bool)), true

	case "Mutation.suscribeToNewsLetter":
		if e.complexity.Mutation.SuscribeToNewsLetter == nil {
			break
		}

		args, err := ec.field_Mutation_suscribeToNewsLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SuscribeToNewsLetter(childComplexity, args["email"].(string)), true

	case "Mutation.transferMoneyEnterprise":
		if e.complexity.Mutation.TransferMoneyEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_transferMoneyEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TransferMoneyEnterprise(childComplexity, args["enterpriseId"].(string), args["pinCode"].(string), args["publicKey"].(string), args["amount"].(float64)), true

	case "Mutation.unassignRole":
		if e.complexity.Mutation.UnassignRole == nil {
			break
		}

		args, err := ec.field_Mutation_unassignRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnassignRole(childComplexity, args["userId"].(string), args["role"].(string), args["pinCode"].(string), args["token"].(string)), true

	case "Mutation.updateEnterpriseInformation":
		if e.complexity.Mutation.UpdateEnterpriseInformation == nil {
			break
		}

		args, err := ec.field_Mutation_updateEnterpriseInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseInformation(childComplexity, args["enterpriseId"].(string), args["rccm"].(string), args["sector"].(string), args["website"].(*string), args["description"].(*string)), true

	case "Mutation.updateEnterpriseType":
		if e.complexity.Mutation.UpdateEnterpriseType == nil {
			break
		}

		args, err := ec.field_Mutation_updateEnterpriseType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseType(childComplexity, args["enterpriseId"].(string), args["type"].(string), args["country"].(string)), true

	case "Mutation.updateExecutionInformation":
		if e.complexity.Mutation.UpdateExecutionInformation == nil {
			break
		}

		args, err := ec.field_Mutation_updateExecutionInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateExecutionInformation(childComplexity, args["enterpriseId"].(string), args["sellingPyshicalGoods"].(*bool), args["selfShipping"].(*bool), args["shippingDelay"].(*string)), true

	case "Mutation.updateFcmToken":
		if e.complexity.Mutation.UpdateFcmToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateFcmToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFcmToken(childComplexity, args["fcmToken"].(*string)), true

	case "Mutation.updatePersonnalInformation":
		if e.complexity.Mutation.UpdatePersonnalInformation == nil {
			break
		}

		args, err := ec.field_Mutation_updatePersonnalInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePersonnalInformation(childComplexity, args["enterpriseId"].(string), args["first_name"].(string), args["last_name"].(string), args["email"].(string), args["address"].(string), args["city"].(string), args["state"].(string), args["zip"].(string)), true

	case "Mutation.updateProfilePicture":
		if e.complexity.Mutation.UpdateProfilePicture == nil {
			break
		}

		args, err := ec.field_Mutation_updateProfilePicture_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfilePicture(childComplexity, args["link"].(string)), true

	case "Mutation.updatePublicInformation":
		if e.complexity.Mutation.UpdatePublicInformation == nil {
			break
		}

		args, err := ec.field_Mutation_updatePublicInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePublicInformation(childComplexity, args["enterpriseId"].(string), args["name"].(string), args["libelle"].(string), args["libelleAbreged"].(string), args["email"].(*string), args["phone"].(string)), true

	case "Mutation.uploadFile":
		if e.complexity.Mutation.UploadFile == nil {
			break
		}

		args, err := ec.field_Mutation_uploadFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadFile(childComplexity, args["file"].(graphql.Upload), args["type"].(string)), true

	case "Notification.createdAt":
		if e.complexity.Notification.CreatedAt == nil {
			break
		}

		return e.complexity.Notification.CreatedAt(childComplexity), true

	case "Notification.from":
		if e.complexity.Notification.From == nil {
			break
		}

		return e.complexity.Notification.From(childComplexity), true

	case "Notification._id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.imgUrl":
		if e.complexity.Notification.ImgURL == nil {
			break
		}

		return e.complexity.Notification.ImgURL(childComplexity), true

	case "Notification.isRead":
		if e.complexity.Notification.IsRead == nil {
			break
		}

		return e.complexity.Notification.IsRead(childComplexity), true

	case "Notification.text":
		if e.complexity.Notification.Text == nil {
			break
		}

		return e.complexity.Notification.Text(childComplexity), true

	case "Notification.type":
		if e.complexity.Notification.Type == nil {
			break
		}

		return e.complexity.Notification.Type(childComplexity), true

	case "Paiement.agency":
		if e.complexity.Paiement.Agency == nil {
			break
		}

		return e.complexity.Paiement.Agency(childComplexity), true

	case "Paiement.agencyId":
		if e.complexity.Paiement.AgencyID == nil {
			break
		}

		return e.complexity.Paiement.AgencyID(childComplexity), true

	case "Paiement.amount":
		if e.complexity.Paiement.Amount == nil {
			break
		}

		return e.complexity.Paiement.Amount(childComplexity), true

	case "Paiement.cancellor":
		if e.complexity.Paiement.Cancellor == nil {
			break
		}

		return e.complexity.Paiement.Cancellor(childComplexity), true

	case "Paiement.createdAt":
		if e.complexity.Paiement.CreatedAt == nil {
			break
		}

		return e.complexity.Paiement.CreatedAt(childComplexity), true

	case "Paiement.creator":
		if e.complexity.Paiement.Creator == nil {
			break
		}

		return e.complexity.Paiement.Creator(childComplexity), true

	case "Paiement.description":
		if e.complexity.Paiement.Description == nil {
			break
		}

		return e.complexity.Paiement.Description(childComplexity), true

	case "Paiement.destination":
		if e.complexity.Paiement.Destination == nil {
			break
		}

		return e.complexity.Paiement.Destination(childComplexity), true

	case "Paiement.destinationUser":
		if e.complexity.Paiement.DestinationUser == nil {
			break
		}

		return e.complexity.Paiement.DestinationUser(childComplexity), true

	case "Paiement.enterprise":
		if e.complexity.Paiement.Enterprise == nil {
			break
		}

		return e.complexity.Paiement.Enterprise(childComplexity), true

	case "Paiement.enterpriseId":
		if e.complexity.Paiement.EnterpriseID == nil {
			break
		}

		return e.complexity.Paiement.EnterpriseID(childComplexity), true

	case "Paiement.fee":
		if e.complexity.Paiement.Fee == nil {
			break
		}

		return e.complexity.Paiement.Fee(childComplexity), true

	case "Paiement.feeEnterprise":
		if e.complexity.Paiement.FeeEnterprise == nil {
			break
		}

		return e.complexity.Paiement.FeeEnterprise(childComplexity), true

	case "Paiement._id":
		if e.complexity.Paiement.ID == nil {
			break
		}

		return e.complexity.Paiement.ID(childComplexity), true

	case "Paiement.shortId":
		if e.complexity.Paiement.ShortID == nil {
			break
		}

		return e.complexity.Paiement.ShortID(childComplexity), true

	case "Paiement.status":
		if e.complexity.Paiement.Status == nil {
			break
		}

		return e.complexity.Paiement.Status(childComplexity), true

	case "Paiement.token":
		if e.complexity.Paiement.Token == nil {
			break
		}

		return e.complexity.Paiement.Token(childComplexity), true

	case "Paiement.transactionId":
		if e.complexity.Paiement.TransactionID == nil {
			break
		}

		return e.complexity.Paiement.TransactionID(childComplexity), true

	case "Paiement.type":
		if e.complexity.Paiement.Type == nil {
			break
		}

		return e.complexity.Paiement.Type(childComplexity), true

	case "Paiement.updatedAt":
		if e.complexity.Paiement.UpdatedAt == nil {
			break
		}

		return e.complexity.Paiement.UpdatedAt(childComplexity), true

	case "Paiement.validator":
		if e.complexity.Paiement.Validator == nil {
			break
		}

		return e.complexity.Paiement.Validator(childComplexity), true

	case "Person.address":
		if e.complexity.Person.Address == nil {
			break
		}

		return e.complexity.Person.Address(childComplexity), true

	case "Person.city":
		if e.complexity.Person.City == nil {
			break
		}

		return e.complexity.Person.City(childComplexity), true

	case "Person.email":
		if e.complexity.Person.Email == nil {
			break
		}

		return e.complexity.Person.Email(childComplexity), true

	case "Person.first_name":
		if e.complexity.Person.FirstName == nil {
			break
		}

		return e.complexity.Person.FirstName(childComplexity), true

	case "Person.last_name":
		if e.complexity.Person.LastName == nil {
			break
		}

		return e.complexity.Person.LastName(childComplexity), true

	case "Person.state":
		if e.complexity.Person.State == nil {
			break
		}

		return e.complexity.Person.State(childComplexity), true

	case "Person.zip":
		if e.complexity.Person.Zip == nil {
			break
		}

		return e.complexity.Person.Zip(childComplexity), true

	case "Query.getActivity":
		if e.complexity.Query.GetActivity == nil {
			break
		}

		return e.complexity.Query.GetActivity(childComplexity), true

	case "Query.getAllContactNotAdded":
		if e.complexity.Query.GetAllContactNotAdded == nil {
			break
		}

		args, err := ec.field_Query_getAllContactNotAdded_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllContactNotAdded(childComplexity, args["searchText"].(string)), true

	case "Query.getAllParticipatingTransactions":
		if e.complexity.Query.GetAllParticipatingTransactions == nil {
			break
		}

		return e.complexity.Query.GetAllParticipatingTransactions(childComplexity), true

	case "Query.getAllTransactionByEnterpriseId":
		if e.complexity.Query.GetAllTransactionByEnterpriseID == nil {
			break
		}

		args, err := ec.field_Query_getAllTransactionByEnterpriseId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllTransactionByEnterpriseID(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string), args["limit"].(float64), args["skip"].(float64)), true

	case "Query.getAllUserContact":
		if e.complexity.Query.GetAllUserContact == nil {
			break
		}

		args, err := ec.field_Query_getAllUserContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllUserContact(childComplexity, args["searchText"].(string)), true

	case "Query.getAllUserEnterprise":
		if e.complexity.Query.GetAllUserEnterprise == nil {
			break
		}

		return e.complexity.Query.GetAllUserEnterprise(childComplexity), true

	case "Query.getEnterpriseBalance":
		if e.complexity.Query.GetEnterpriseBalance == nil {
			break
		}

		args, err := ec.field_Query_getEnterpriseBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEnterpriseBalance(childComplexity, args["enterpriseId"].(string)), true

	case "Query.getEntrepriseById":
		if e.complexity.Query.GetEntrepriseByID == nil {
			break
		}

		args, err := ec.field_Query_getEntrepriseById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEntrepriseByID(childComplexity, args["enterpriseId"].(string)), true

	case "Query.getFailedTransactionByEnterpriseId":
		if e.complexity.Query.GetFailedTransactionByEnterpriseID == nil {
			break
		}

		args, err := ec.field_Query_getFailedTransactionByEnterpriseId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFailedTransactionByEnterpriseID(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string), args["limit"].(float64), args["skip"].(float64)), true

	case "Query.getNonCapturedTransactionByEnterpriseId":
		if e.complexity.Query.GetNonCapturedTransactionByEnterpriseID == nil {
			break
		}

		args, err := ec.field_Query_getNonCapturedTransactionByEnterpriseId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNonCapturedTransactionByEnterpriseID(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string), args["limit"].(float64), args["skip"].(float64)), true

	case "Query.getPdf":
		if e.complexity.Query.GetPDF == nil {
			break
		}

		args, err := ec.field_Query_getPdf_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPDF(childComplexity, args["enterpriseId"].(string)), true

	case "Query.getProfilBrutChartData":
		if e.complexity.Query.GetProfilBrutChartData == nil {
			break
		}

		args, err := ec.field_Query_getProfilBrutChartData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProfilBrutChartData(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string)), true

	case "Query.getProfilNetChartData":
		if e.complexity.Query.GetProfilNetChartData == nil {
			break
		}

		args, err := ec.field_Query_getProfilNetChartData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProfilNetChartData(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string)), true

	case "Query.getProfilNonCarpturedChartData":
		if e.complexity.Query.GetProfilNonCarpturedChartData == nil {
			break
		}

		args, err := ec.field_Query_getProfilNonCarpturedChartData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProfilNonCarpturedChartData(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string)), true

	case "Query.getQrOwner":
		if e.complexity.Query.GetQROwner == nil {
			break
		}

		args, err := ec.field_Query_getQrOwner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetQROwner(childComplexity, args["qrcode"].(string)), true

	case "Query.getRefundedTransactionByEnterpriseId":
		if e.complexity.Query.GetRefundedTransactionByEnterpriseID == nil {
			break
		}

		args, err := ec.field_Query_getRefundedTransactionByEnterpriseId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRefundedTransactionByEnterpriseID(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string), args["limit"].(float64), args["skip"].(float64)), true

	case "Query.getSuccessFullTransactionByEnterpriseId":
		if e.complexity.Query.GetSuccessFullTransactionByEnterpriseID == nil {
			break
		}

		args, err := ec.field_Query_getSuccessFullTransactionByEnterpriseId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSuccessFullTransactionByEnterpriseID(childComplexity, args["enterpriseId"].(string), args["from"].(string), args["to"].(string), args["limit"].(float64), args["skip"].(float64)), true

	case "Query.getTransactionById":
		if e.complexity.Query.GetTransactionByID == nil {
			break
		}

		args, err := ec.field_Query_getTransactionById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTransactionByID(childComplexity, args["id"].(string)), true

	case "Query.getTransactionByIdAgent":
		if e.complexity.Query.GetTransactionByIDAgent == nil {
			break
		}

		args, err := ec.field_Query_getTransactionByIdAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTransactionByIDAgent(childComplexity, args["id"].(string)), true

	case "Query.getTransactionByIdUnauthed":
		if e.complexity.Query.GetTransactionByIDUnauthed == nil {
			break
		}

		args, err := ec.field_Query_getTransactionByIdUnauthed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTransactionByIDUnauthed(childComplexity, args["id"].(string)), true

	case "Query.getselfEmployedPDF":
		if e.complexity.Query.GetselfEmployedPDF == nil {
			break
		}

		return e.complexity.Query.GetselfEmployedPDF(childComplexity), true

	case "Query.loadBalance":
		if e.complexity.Query.LoadBalance == nil {
			break
		}

		return e.complexity.Query.LoadBalance(childComplexity), true

	case "Query.loadNotification":
		if e.complexity.Query.LoadNotification == nil {
			break
		}

		return e.complexity.Query.LoadNotification(childComplexity), true

	case "Query.loadNotificationCount":
		if e.complexity.Query.LoadNotificationCount == nil {
			break
		}

		return e.complexity.Query.LoadNotificationCount(childComplexity), true

	case "Query.loadQRCode":
		if e.complexity.Query.LoadQRCode == nil {
			break
		}

		return e.complexity.Query.LoadQRCode(childComplexity), true

	case "Query.loadTokenSupply":
		if e.complexity.Query.LoadTokenSupply == nil {
			break
		}

		args, err := ec.field_Query_loadTokenSupply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LoadTokenSupply(childComplexity, args["token"].(string)), true

	case "Query.retrieveAllAgenciesTransactions":
		if e.complexity.Query.RetrieveAllAgenciesTransactions == nil {
			break
		}

		return e.complexity.Query.RetrieveAllAgenciesTransactions(childComplexity), true

	case "Query.retrieveAllAgnecies":
		if e.complexity.Query.RetrieveAllAgnecies == nil {
			break
		}

		return e.complexity.Query.RetrieveAllAgnecies(childComplexity), true

	case "Query.searchUser":
		if e.complexity.Query.SearchUser == nil {
			break
		}

		args, err := ec.field_Query_searchUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchUser(childComplexity, args["searchText"].(*string)), true

	case "Query.userExist":
		if e.complexity.Query.UserExist == nil {
			break
		}

		args, err := ec.field_Query_userExist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserExist(childComplexity, args["uid"].(string)), true

	case "Query.usersExist":
		if e.complexity.Query.UsersExist == nil {
			break
		}

		return e.complexity.Query.UsersExist(childComplexity), true

	case "RatingUser.rating_count":
		if e.complexity.RatingUser.RatingCount == nil {
			break
		}

		return e.complexity.RatingUser.RatingCount(childComplexity), true

	case "RatingUser.rating_total":
		if e.complexity.RatingUser.RatingTotal == nil {
			break
		}

		return e.complexity.RatingUser.RatingTotal(childComplexity), true

	case "Subscription.contactAdded":
		if e.complexity.Subscription.ContactAdded == nil {
			break
		}

		args, err := ec.field_Subscription_contactAdded_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ContactAdded(childComplexity, args["listener"].(string)), true

	case "Subscription.notificationAdded":
		if e.complexity.Subscription.NotificationAdded == nil {
			break
		}

		args, err := ec.field_Subscription_notificationAdded_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NotificationAdded(childComplexity, args["listener"].(string)), true

	case "Subscription.transactionPayed":
		if e.complexity.Subscription.TransactionPayed == nil {
			break
		}

		args, err := ec.field_Subscription_transactionPayed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.TransactionPayed(childComplexity, args["id"].(string)), true

	case "TransactionWithPageInfo.pageTotal":
		if e.complexity.TransactionWithPageInfo.PageTotal == nil {
			break
		}

		return e.complexity.TransactionWithPageInfo.PageTotal(childComplexity), true

	case "TransactionWithPageInfo.transactions":
		if e.complexity.TransactionWithPageInfo.Transactions == nil {
			break
		}

		return e.complexity.TransactionWithPageInfo.Transactions(childComplexity), true

	case "User.adresses":
		if e.complexity.User.Adresses == nil {
			break
		}

		return e.complexity.User.Adresses(childComplexity), true

	case "User.birth_date":
		if e.complexity.User.BirthDate == nil {
			break
		}

		return e.complexity.User.BirthDate(childComplexity), true

	case "User.contacts":
		if e.complexity.User.Contacts == nil {
			break
		}

		return e.complexity.User.Contacts(childComplexity), true

	case "User.country":
		if e.complexity.User.Country == nil {
			break
		}

		return e.complexity.User.Country(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.currency":
		if e.complexity.User.Currency == nil {
			break
		}

		return e.complexity.User.Currency(childComplexity), true

	case "User.defaultCurrency":
		if e.complexity.User.DefaultCurrency == nil {
			break
		}

		return e.complexity.User.DefaultCurrency(childComplexity), true

	case "User.default_method":
		if e.complexity.User.DefaultMethod == nil {
			break
		}

		return e.complexity.User.DefaultMethod(childComplexity), true

	case "User.deleted":
		if e.complexity.User.Deleted == nil {
			break
		}

		return e.complexity.User.Deleted(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.fcmToken":
		if e.complexity.User.FcmToken == nil {
			break
		}

		return e.complexity.User.FcmToken(childComplexity), true

	case "User.fee":
		if e.complexity.User.Fee == nil {
			break
		}

		return e.complexity.User.Fee(childComplexity), true

	case "User.firebaseUID":
		if e.complexity.User.FirebaseUID == nil {
			break
		}

		return e.complexity.User.FirebaseUID(childComplexity), true

	case "User.first_name":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User._id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.indentityStatus":
		if e.complexity.User.IndentityStatus == nil {
			break
		}

		return e.complexity.User.IndentityStatus(childComplexity), true

	case "User.is_online":
		if e.complexity.User.IsOnline == nil {
			break
		}

		return e.complexity.User.IsOnline(childComplexity), true

	case "User.keypair":
		if e.complexity.User.Keypair == nil {
			break
		}

		return e.complexity.User.Keypair(childComplexity), true

	case "User.last_name":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.notificationPermission":
		if e.complexity.User.NotificationPermission == nil {
			break
		}

		return e.complexity.User.NotificationPermission(childComplexity), true

	case "User.permissions":
		if e.complexity.User.Permissions == nil {
			break
		}

		return e.complexity.User.Permissions(childComplexity), true

	case "User.phonenumber":
		if e.complexity.User.Phonenumber == nil {
			break
		}

		return e.complexity.User.Phonenumber(childComplexity), true

	case "User.photoUrl":
		if e.complexity.User.PhotoURL == nil {
			break
		}

		return e.complexity.User.PhotoURL(childComplexity), true

	case "User.pinCode":
		if e.complexity.User.PinCode == nil {
			break
		}

		return e.complexity.User.PinCode(childComplexity), true

	case "User.rating":
		if e.complexity.User.Rating == nil {
			break
		}

		return e.complexity.User.Rating(childComplexity), true

	case "User.residenceProofStatus":
		if e.complexity.User.ResidenceProofStatus == nil {
			break
		}

		return e.complexity.User.ResidenceProofStatus(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.wallet":
		if e.complexity.User.Wallet == nil {
			break
		}

		return e.complexity.User.Wallet(childComplexity), true

	case "UserCreated.customToken":
		if e.complexity.UserCreated.CustomToken == nil {
			break
		}

		return e.complexity.UserCreated.CustomToken(childComplexity), true

	case "UserCreated.user":
		if e.complexity.UserCreated.User == nil {
			break
		}

		return e.complexity.UserCreated.User(childComplexity), true

	case "UserSmall.first_name":
		if e.complexity.UserSmall.FirstName == nil {
			break
		}

		return e.complexity.UserSmall.FirstName(childComplexity), true

	case "UserSmall._id":
		if e.complexity.UserSmall.ID == nil {
			break
		}

		return e.complexity.UserSmall.ID(childComplexity), true

	case "UserSmall.keypair":
		if e.complexity.UserSmall.Keypair == nil {
			break
		}

		return e.complexity.UserSmall.Keypair(childComplexity), true

	case "UserSmall.last_name":
		if e.complexity.UserSmall.LastName == nil {
			break
		}

		return e.complexity.UserSmall.LastName(childComplexity), true

	case "UserSmall.photoUrl":
		if e.complexity.UserSmall.PhotoURL == nil {
			break
		}

		return e.complexity.UserSmall.PhotoURL(childComplexity), true

	case "Wallet.address":
		if e.complexity.Wallet.Address == nil {
			break
		}

		return e.complexity.Wallet.Address(childComplexity), true

	case "Wallet.amount":
		if e.complexity.Wallet.Amount == nil {
			break
		}

		return e.complexity.Wallet.Amount(childComplexity), true

	case "Wallet.isFrozen":
		if e.complexity.Wallet.IsFrozen == nil {
			break
		}

		return e.complexity.Wallet.IsFrozen(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAdressInput,
		ec.unmarshalInputAgencyInpyt,
		ec.unmarshalInputBirthDate,
		ec.unmarshalInputEmailInput,
		ec.unmarshalInputEnterpriseInput,
		ec.unmarshalInputKeypairInput,
		ec.unmarshalInputLocationInput,
		ec.unmarshalInputOwnerRule,
		ec.unmarshalInputPersonInput,
		ec.unmarshalInputRatingInsideInput,
		ec.unmarshalInputTopUpInput,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputWithdrawInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._queryMiddleware(ctx, rc.Operation, func(ctx context.Context) (interface{}, error) {
				return ec._Query(ctx, rc.Operation.SelectionSet), nil
			})
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._mutationMiddleware(ctx, rc.Operation, func(ctx context.Context) (interface{}, error) {
				return ec._Mutation(ctx, rc.Operation.SelectionSet), nil
			})
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

union QRCodeOwner = EnterpriseSmall | UserSmall | Paiement

directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION | QUERY | MUTATION
directive @authWithPin(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION | QUERY | MUTATION
directive @authCommerce on OBJECT | FIELD_DEFINITION | QUERY | MUTATION
directive @owner(rules: [OwnerRule!]!) on OBJECT | FIELD_DEFINITION | QUERY | MUTATION
directive @tokenVerify on OBJECT | FIELD_DEFINITION | QUERY | MUTATION

scalar Upload
scalar Byte

enum ModelOperation { create update delete read }
enum AuthStrategy { owner groups private public }

input OwnerRule {
  allow: AuthStrategy
  ownerField: String
  operations: [ModelOperation]
}


type UserCreated {
  user: User!
  customToken: String!
}


type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

enum UserStatus {
  BANNED
  SHADOWBANNED
  ACTIIVE
}

enum EnterpriseType {
  INDIVIDUAL
  COMPANY
  ONG
}

enum Role {
  ADMIN,
  REVIEWER,
  USER,
  PAUSER_ROLE,
  MINTER_ROLE,
  BURNER_ROLE,
  FREEZE_ROLE,
  AGENT_ROLE,
  MANAGMENT_ROLE,
  KYC_AGENT,
  OWNER
}

enum IdentityStatus {
  NOT_UPLOADED
  UPLOADED
  VERIFIED
  REFUSED
}

enum ResidenceProofStatus {
  NOT_UPLOADED
  UPLOADED
  VERIFIED
  REFUSED
}

enum PaymentType {
  PAIEMENT
  TRANSFERT
  TOPUP
  WITHDRAW
  COMMERCE
}

enum PaymentStatus {
  FINALIZED
  ONGOING
  REFUNDED
  IN_PROGRESS
  CANCELLED
  DONE
  FAILED
  CANCELLED_USER
  CANCELLED_AGENT
  REQUIRES_PAIEMENT
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
}


enum ReportStatus {
  PENDING
  REVIEWING
  PROCESSED
}





type Paiement {
  _id: ID!
  status: PaymentStatus!
  type: PaymentType!
  creator: UserSmall
  token: String!
  amount: Float!
  fee: Float
  feeEnterprise: Float
  cancellor: UserSmall
  agency: Agency
  agencyId: String
  destination: String!
  validator: UserSmall
  transactionId: String
  createdAt: String
  description: String
  updatedAt: String
  shortId: String!
  destinationUser: UserSmall
  enterprise: EnterpriseSmall
  enterpriseId: String
}


input RatingInsideInput {
    rating_count: Int
    rating_total: Float
}

  input BirthDate {
    day: Int!
    month: Int!
    year: Int!
    iso: String!
  }

  type BirthDateOut {
    day: Int!
    month: Int!
    year: Int!
    iso: String!
  }


input UserInput {
    adress: AdressInput!
    display_name: String
    email: String!
    first_name: String!
    last_name: String!
    phonenumber: String!
    photoUrl: String
    website: String
    firebaseUID: String
    country: String!
    birth_date: BirthDate!
    fcmToken: String
    age: Int
    fullDocumentImage: String
    personalIdNumber: String
    faceImage: String
    placeOfBirth: String
    sex: String
    race: String
    nationality: String
    expired: Boolean
    documentNumber: String
    dateOfExpiryPermanent: Boolean
    dateOfIssue: String
    dateOfExpiry: String
    pinCode: String!
    invitedBy: String
    keypair: KeypairInput
    createdAt: String
    updatedAt: String
    token: String!
    password: String!
  }


  type RatingUser {
    rating_total: Float
    rating_count: Int
  }

  input KeypairInput {
    publicKey: String
    secretKey: String
  }

  type Keypair {
    publicKey: String!
    secretKey: String!
  }




  input EmailInput {
    name: String!
    email: String!
    message: String!
  }



  type User @auth(requires: OWNER)  {
    _id: ID!
    firebaseUID: String
    email: String
    first_name: String
    last_name: String
    phonenumber: String
    createdAt: String
    photoUrl: String
    updatedAt : String
    defaultCurrency: String
    adresses : [Adress] 
    fcmToken: String
    rating: RatingUser
    permissions: [Role]
    country: String
    contacts: [String]
    wallet: Wallet
    currency: String
    birth_date: BirthDateOut
    notificationPermission: Boolean
    fee: Int
    is_online: Boolean
    indentityStatus: IdentityStatus
    residenceProofStatus: ResidenceProofStatus
    default_method: String
    keypair: Keypair
    deleted: Boolean
    pinCode: String
  }


  type UserSmall {
    _id: ID!
    first_name: String
    last_name: String
    photoUrl: String
    keypair: Keypair
  }


  input LocationInput {
    latitude: Float
    longitude: Float
  }

  type Location {
    latitude: Float
    longitude: Float
  }

  

  input AdressInput {
    title: String
    location: LocationInput
    is_chosed: Boolean
    city: String
  }



  type Adress {
    title: String
    location: Location
    is_chosed: Boolean
  }



  type Wallet {
    address: String
    amount: Float
    isFrozen: Boolean
  }




  type Notification {
    _id: String
    text: String
    type: String
    imgUrl: String
    isRead: Boolean
    from: UserSmall
    createdAt: String
  }



  enum AgencyOpenStatus {
    OPEN
    CLOSED
    CLOSED_DEFINITELY
}


  input AgencyInpyt {
    title: String!,
    address: String!,
    city: String!
    country: String!
    token: String!
  }


  type Agency {
    _id: ID
    title: String,
    address: String,
    status: AgencyOpenStatus
    createdAt: String
    city: String
    country: String
  }


  input TopUpInput {
    amount: Float!,
    agency: ID!,
    token: String!
    destination: String!
    destinationUser: String!
  }


  input WithdrawInput {
    amount: Float!
    agency: ID!
    token: String!
    destination: String!
    destinationUser: String!
  }



input PersonInput {
  first_name: String!
  last_name: String!
  email: String!
  address: String!
  city: String!
  zip: String
  state: String
}

type Person {
  first_name: String
  last_name: String
  email: String
  address: String
  city: String
  zip: String
  state: String
}

input EnterpriseInput {
  name: String!
  country: String!
  address: AdressInput!
  logoUrl: String
  website: String
  type: EnterpriseType!
  rccm: String!
  activitySector: String!
  person: PersonInput 
  description: String
  sellingPhysicalGoods: Boolean
  selfShippingProduct: Boolean
  shippingDelay: String
  transactionLibele: String!
  abregedLibele: String!
  phone: String!
  email: String!
}

type Enterprise  {
    _id: ID!
    type: String
    name: String
    website: String
    logoUrl: String
    creator: ID!
    createdAt: String!
    updatedAt: String
    person: Person! 
    publishableKey: String!
    private_key: String!
    walletPublicKey: String!
    walletSecretKey: String
    country: String
    address: Adress
    default_enterprise: Boolean!
    description: String
    sellingPhysicalGoods: Boolean
    selfShippingProduct: Boolean
    shippingDelay: String
    transactionLibele: String
    abregedLibele: String
    phone: String
    email: String
    rccm: String
    sector: String
}


type EnterpriseSmall   {
    _id: ID!
    name: String
    website: String
    logoUrl: String
    walletPublicKey: String!
    country: String
    address: Adress
}

type TransactionWithPageInfo {
  transactions: [Paiement]!
  pageTotal: Float
}

type ChartData {
  currentTotal: Float,
  formerTotal: Float,
  pourcentageDifference: Float
  isPositive: Boolean
  chart: [Float]
}



  type Subscription {
    notificationAdded(listener: String!): Notification @auth(requires: USER)
    transactionPayed(id: String!): Paiement
    contactAdded(listener: String!): Notification @auth(requires: USER)
  }

  type Query {
    userExist(uid: String!): Boolean!
    usersExist: User
    loadNotification: [Notification]! @auth(requires: USER) 
    loadNotificationCount: Float! @auth(requires: USER)
    loadBalance: Wallet! @auth(requires: USER)
    searchUser(searchText: String): [UserSmall]! @auth(requires: USER)
    getAllUserContact(searchText: String!): [UserSmall]! @auth(requires: USER)
    getAllContactNotAdded(searchText: String!): [UserSmall]! @auth(requires: USER)
    getActivity: [Paiement]! @auth(requires: USER)
    loadQRCode: String! @auth(requires: USER)
    loadTokenSupply(token: String!): Int!
    retrieveAllAgnecies: [Agency!]! @auth(requires: USER)
    retrieveAllAgenciesTransactions: [Paiement]! @auth(requires: AGENT_ROLE)
    getAllParticipatingTransactions: [Paiement]! @auth(requires: USER)
    getQrOwner(qrcode: String!): QRCodeOwner! @auth(requires: USER)
    getTransactionByIdUnauthed(id: String!): Paiement
    getTransactionById(id: String!): Paiement @auth(requires: USER)
    getTransactionByIdAgent(id: String!): Paiement @auth(requires: AGENT_ROLE)
    getselfEmployedPDF: String! @auth(requires: USER)
    getAllUserEnterprise: [Enterprise!] @auth(requires: USER)
    

    # transaction enterprise
    getAllTransactionByEnterpriseId(enterpriseId: String!, from: String!, to: String!, limit: Float!, skip: Float!): TransactionWithPageInfo! @auth(requires: USER)
    getSuccessFullTransactionByEnterpriseId(enterpriseId: String!, from: String!, to: String!, limit: Float!, skip: Float!): TransactionWithPageInfo! @auth(requires: USER)
    getRefundedTransactionByEnterpriseId(enterpriseId: String!, from: String!, to: String!, limit: Float!, skip: Float!): TransactionWithPageInfo! @auth(requires: USER)
    getNonCapturedTransactionByEnterpriseId(enterpriseId: String!, from: String!, to: String!, limit: Float!, skip: Float!): TransactionWithPageInfo! @auth(requires: USER)
    getFailedTransactionByEnterpriseId(enterpriseId: String!, from: String!, to: String!, limit: Float!, skip: Float!): TransactionWithPageInfo! @auth(requires: USER)


    # enterprise panels
    getProfilNetChartData(enterpriseId: String!, from: String!, to: String!): ChartData! @auth(requires: USER)
    getProfilBrutChartData(enterpriseId: String!, from: String!, to: String!): ChartData! @auth(requires: USER)
    getProfilNonCarpturedChartData(enterpriseId: String!, from: String!, to: String!): ChartData! @auth(requires: USER)

    getEnterpriseBalance(enterpriseId: String!): Float! @auth(requires: USER)

    getEntrepriseById(enterpriseId: String!): Enterprise! @auth(requires: USER)
    getPdf(enterpriseId: String!): String! @auth(requires: USER)

  }

  

  type Mutation {
    connect(token: String!): String! 
    createUser(user: UserInput): UserCreated! @tokenVerify
    deleteUser: Boolean! @auth(requires: USER)
    sendEmail(email: EmailInput): Boolean!
    suscribeToNewsLetter(email: String!): Boolean!
    createTransfer(address: String, token: String!, amount: Float!, pinCode: String!, destinationUser: String!): Boolean! @authWithPin(requires: USER)
    updateProfilePicture(link: String!): Boolean! @auth(requires: USER)
    createContact(contact: String!): Boolean! @auth(requires: USER)
    removeContact(contact_id: String!): Boolean! @auth(requires: USER)
    addAGency(agency: AgencyInpyt!, pinCode: String!): String! @authWithPin(requires: MANAGMENT_ROLE)
    addWithDraw(withdraw: WithdrawInput!, pinCode: String!): String! @authWithPin(requires: USER) 
    addTopUp(topup: TopUpInput!, pinCode: String!): String! @authWithPin(requires: USER)
    confirmTransactionAgent(transaction_id: String!, type: PaymentType!, token: String!, pinCode: String!,): Boolean! @authWithPin(requires: AGENT_ROLE)
    cancelTransactionAgent(transaction_id: String, type: PaymentType, pinCode: String!): Boolean! @authWithPin(requires: AGENT_ROLE)
    cancelTransactionUser(transaction_id: String, type: PaymentType, pinCode: String!): Boolean! @authWithPin(requires: USER)
    setIsOnline(toggle: Boolean): Boolean! @auth(requires: USER)
    updateFcmToken(fcmToken: String): Boolean! @auth(requires: USER)
    changePinCode(newPin: String): Boolean! @auth(requires: USER)
    setAllNotificationToRead: Boolean! @auth(requires: USER)
    uploadFile(file: Upload!, type: String!): User! @auth(requires: USER)
    reportTransaction(transaction_id: String!, message: String!): Boolean @auth(requires: USER)
    assignRole(userId: String!, role: String!, pinCode: String!, token: String!): Boolean @authWithPin(requires: AGENT_ROLE)
    unassignRole(userId: String!, role: String!, pinCode: String!, token: String!): Boolean @authWithPin(requires: AGENT_ROLE)

    # create enterprise
    createEnterprise(enterprise: EnterpriseInput!): Enterprise! @auth(requires: USER)
    authenticateForPayment(amount: Float!, ref: String): QRCodeOwner! @authCommerce
    recreateEnterprisePublishableKey(enterpriseId: String!, pinCode: String!): [Enterprise]! @authWithPin(requires: USER)
    recreateEnterprisePrivateKey(enterpriseId: String!, pinCode: String!): [Enterprise]! @authWithPin(requires: USER)
    removeEnterprise(enterpriseId: String!, pinCode: String!): [Enterprise]! @authWithPin(requires: USER)
    changeDefaultEnterprise(enterpriseId: String!): [Enterprise]! @auth(requires: USER)



    # update enterprise
    updateEnterpriseType(enterpriseId: String!, type: String!, country: String!): [Enterprise]! @auth(requires: USER)
    updatePersonnalInformation(enterpriseId: String!, first_name: String!, last_name: String!, email: String!, address: String!, city: String!, state: String!, zip: String!): [Enterprise]! @auth(requires: USER)
    updateEnterpriseInformation(enterpriseId: String!, rccm: String!, sector: String!, website: String, description: String): [Enterprise]! @auth(requires: USER)
    updateExecutionInformation(enterpriseId: String!, sellingPyshicalGoods: Boolean, selfShipping: Boolean, shippingDelay: String): [Enterprise]! @auth(requires: USER)
    updatePublicInformation(enterpriseId: String!, name: String!, libelle: String!, libelleAbreged: String!, email: String, phone: String!): [Enterprise]! @auth(requires: USER)



    # create Transacttion
    payUnConfirmedTransaction(enterpriseId: String!, pinCode: String!, transactionId: String!): Paiement! @authWithPin(requires: USER)
    payEnterprise(enterpriseId: String!, amount: Float!, pinCode: String!): Paiement! @authWithPin(requires: USER)
    refundTransaction(enterpriseId: String!, pinCode: String!, transactionId: String!): Boolean! @authWithPin(requires: USER)
    cancelTransactionEnterprise(enterpriseId: String!, pinCode: String!, transactionId: String!): Boolean! @authWithPin(requires: USER)
    transferMoneyEnterprise(enterpriseId: String!, pinCode: String!, publicKey: String!, amount: Float!): Boolean! @authWithPin(requires: USER)
  }
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_authWithPin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Role
	if tmp, ok := rawArgs["requires"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requires"))
		arg0, err = ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requires"] = arg0
	return args, nil
}

func (ec *executionContext) dir_auth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Role
	if tmp, ok := rawArgs["requires"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requires"))
		arg0, err = ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requires"] = arg0
	return args, nil
}

func (ec *executionContext) dir_owner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OwnerRule
	if tmp, ok := rawArgs["rules"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rules"))
		arg0, err = ec.unmarshalNOwnerRule2ᚕᚖserverᚋgraphᚋmodelᚐOwnerRuleᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rules"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addAGency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AgencyInpyt
	if tmp, ok := rawArgs["agency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agency"))
		arg0, err = ec.unmarshalNAgencyInpyt2serverᚋgraphᚋmodelᚐAgencyInpyt(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agency"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addTopUp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TopUpInput
	if tmp, ok := rawArgs["topup"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup"))
		arg0, err = ec.unmarshalNTopUpInput2serverᚋgraphᚋmodelᚐTopUpInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topup"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addWithDraw_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.WithdrawInput
	if tmp, ok := rawArgs["withdraw"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdraw"))
		arg0, err = ec.unmarshalNWithdrawInput2serverᚋgraphᚋmodelᚐWithdrawInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdraw"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_authenticateForPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg0, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["ref"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ref"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ref"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelTransactionAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["transaction_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transaction_id"] = arg0
	var arg1 *model.PaymentType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg1, err = ec.unmarshalOPaymentType2ᚖserverᚋgraphᚋmodelᚐPaymentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelTransactionEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["transactionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transactionId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelTransactionUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["transaction_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transaction_id"] = arg0
	var arg1 *model.PaymentType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg1, err = ec.unmarshalOPaymentType2ᚖserverᚋgraphᚋmodelᚐPaymentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_changeDefaultEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePinCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["newPin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPin"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPin"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_confirmTransactionAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["transaction_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transaction_id"] = arg0
	var arg1 model.PaymentType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg1, err = ec.unmarshalNPaymentType2serverᚋgraphᚋmodelᚐPaymentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_connect_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseInput
	if tmp, ok := rawArgs["enterprise"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise"))
		arg0, err = ec.unmarshalNEnterpriseInput2serverᚋgraphᚋmodelᚐEnterpriseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTransfer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg1
	var arg2 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg2, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["destinationUser"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationUser"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationUser"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserInput
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalOUserInput2ᚖserverᚋgraphᚋmodelᚐUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_payEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg1, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_payUnConfirmedTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["transactionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transactionId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_recreateEnterprisePrivateKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_recreateEnterprisePublishableKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_refundTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["transactionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionId"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transactionId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_removeContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contact_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reportTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["transaction_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transaction_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sendEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EmailInput
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalOEmailInput2ᚖserverᚋgraphᚋmodelᚐEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setIsOnline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["toggle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toggle"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["toggle"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_suscribeToNewsLetter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_transferMoneyEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["publicKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicKey"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publicKey"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_unassignRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pinCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pinCode"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEnterpriseInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["rccm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rccm"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rccm"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["sector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sector"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sector"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["website"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["website"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEnterpriseType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["country"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["country"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateExecutionInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["sellingPyshicalGoods"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellingPyshicalGoods"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sellingPyshicalGoods"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["selfShipping"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selfShipping"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selfShipping"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["shippingDelay"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingDelay"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shippingDelay"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFcmToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["fcmToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmToken"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fcmToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePersonnalInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["first_name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first_name"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["last_name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last_name"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["city"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["city"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["zip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["zip"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProfilePicture_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["link"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["link"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePublicInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["libelle"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("libelle"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["libelle"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["libelleAbreged"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("libelleAbreged"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["libelleAbreged"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllContactNotAdded_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchText"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchText"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchText"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllTransactionByEnterpriseId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getAllUserContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchText"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchText"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchText"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEnterpriseBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEntrepriseById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getFailedTransactionByEnterpriseId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getNonCapturedTransactionByEnterpriseId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getPdf_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProfilBrutChartData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getProfilNetChartData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getProfilNonCarpturedChartData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getQrOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["qrcode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qrcode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qrcode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRefundedTransactionByEnterpriseId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getSuccessFullTransactionByEnterpriseId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterpriseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterpriseId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterpriseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	var arg3 float64
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 float64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg4, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getTransactionByIdAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTransactionByIdUnauthed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTransactionById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_loadTokenSupply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchText"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchText"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchText"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userExist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["uid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uid"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["uid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_contactAdded_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["listener"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listener"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["listener"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_notificationAdded_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["listener"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("listener"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["listener"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_transactionPayed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _queryMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (interface{}, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "auth":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_auth_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Auth == nil {
					return nil, errors.New("directive auth is not implemented")
				}
				return ec.directives.Auth(ctx, obj, n, args["requires"].(*model.Role))
			}
		case "authCommerce":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.AuthCommerce == nil {
					return nil, errors.New("directive authCommerce is not implemented")
				}
				return ec.directives.AuthCommerce(ctx, obj, n)
			}
		case "authWithPin":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_authWithPin_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.AuthWithPin == nil {
					return nil, errors.New("directive authWithPin is not implemented")
				}
				return ec.directives.AuthWithPin(ctx, obj, n, args["requires"].(*model.Role))
			}
		case "owner":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_owner_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Owner == nil {
					return nil, errors.New("directive owner is not implemented")
				}
				return ec.directives.Owner(ctx, obj, n, args["rules"].([]*model.OwnerRule))
			}
		case "tokenVerify":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.TokenVerify == nil {
					return nil, errors.New("directive tokenVerify is not implemented")
				}
				return ec.directives.TokenVerify(ctx, obj, n)
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

func (ec *executionContext) _mutationMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (interface{}, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "auth":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_auth_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Auth == nil {
					return nil, errors.New("directive auth is not implemented")
				}
				return ec.directives.Auth(ctx, obj, n, args["requires"].(*model.Role))
			}
		case "authCommerce":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.AuthCommerce == nil {
					return nil, errors.New("directive authCommerce is not implemented")
				}
				return ec.directives.AuthCommerce(ctx, obj, n)
			}
		case "authWithPin":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_authWithPin_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.AuthWithPin == nil {
					return nil, errors.New("directive authWithPin is not implemented")
				}
				return ec.directives.AuthWithPin(ctx, obj, n, args["requires"].(*model.Role))
			}
		case "owner":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_owner_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Owner == nil {
					return nil, errors.New("directive owner is not implemented")
				}
				return ec.directives.Owner(ctx, obj, n, args["rules"].([]*model.OwnerRule))
			}
		case "tokenVerify":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.TokenVerify == nil {
					return nil, errors.New("directive tokenVerify is not implemented")
				}
				return ec.directives.TokenVerify(ctx, obj, n)
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Adress_title(ctx context.Context, field graphql.CollectedField, obj *model.Adress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Adress_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Adress_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Adress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Adress_location(ctx context.Context, field graphql.CollectedField, obj *model.Adress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Adress_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖserverᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Adress_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Adress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Adress_is_chosed(ctx context.Context, field graphql.CollectedField, obj *model.Adress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Adress_is_chosed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsChosed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Adress_is_chosed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Adress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency__id(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_title(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_address(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_status(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AgencyOpenStatus)
	fc.Result = res
	return ec.marshalOAgencyOpenStatus2ᚖserverᚋgraphᚋmodelᚐAgencyOpenStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgencyOpenStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_city(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Agency_country(ctx context.Context, field graphql.CollectedField, obj *model.Agency) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Agency_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Agency_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Agency",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BirthDateOut_day(ctx context.Context, field graphql.CollectedField, obj *model.BirthDateOut) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BirthDateOut_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BirthDateOut_day(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BirthDateOut",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BirthDateOut_month(ctx context.Context, field graphql.CollectedField, obj *model.BirthDateOut) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BirthDateOut_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BirthDateOut_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BirthDateOut",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BirthDateOut_year(ctx context.Context, field graphql.CollectedField, obj *model.BirthDateOut) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BirthDateOut_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BirthDateOut_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BirthDateOut",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BirthDateOut_iso(ctx context.Context, field graphql.CollectedField, obj *model.BirthDateOut) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BirthDateOut_iso(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BirthDateOut_iso(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BirthDateOut",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_currentTotal(ctx context.Context, field graphql.CollectedField, obj *model.ChartData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartData_currentTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartData_currentTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_formerTotal(ctx context.Context, field graphql.CollectedField, obj *model.ChartData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartData_formerTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormerTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartData_formerTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_pourcentageDifference(ctx context.Context, field graphql.CollectedField, obj *model.ChartData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartData_pourcentageDifference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PourcentageDifference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartData_pourcentageDifference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_isPositive(ctx context.Context, field graphql.CollectedField, obj *model.ChartData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartData_isPositive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPositive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartData_isPositive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_chart(ctx context.Context, field graphql.CollectedField, obj *model.ChartData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartData_chart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartData_chart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise__id(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_website(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_website(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_creator(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_person(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_person(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Person, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Person)
	fc.Result = res
	return ec.marshalNPerson2ᚖserverᚋgraphᚋmodelᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_person(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "first_name":
				return ec.fieldContext_Person_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_Person_last_name(ctx, field)
			case "email":
				return ec.fieldContext_Person_email(ctx, field)
			case "address":
				return ec.fieldContext_Person_address(ctx, field)
			case "city":
				return ec.fieldContext_Person_city(ctx, field)
			case "zip":
				return ec.fieldContext_Person_zip(ctx, field)
			case "state":
				return ec.fieldContext_Person_state(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Person", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_publishableKey(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_publishableKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishableKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_publishableKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_private_key(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_private_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivateKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_private_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_walletPublicKey(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletPublicKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_walletPublicKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_walletSecretKey(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletSecretKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_walletSecretKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_country(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Adress)
	fc.Result = res
	return ec.marshalOAdress2ᚖserverᚋgraphᚋmodelᚐAdress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_Adress_title(ctx, field)
			case "location":
				return ec.fieldContext_Adress_location(ctx, field)
			case "is_chosed":
				return ec.fieldContext_Adress_is_chosed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Adress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_default_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_default_enterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_default_enterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_description(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_sellingPhysicalGoods(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellingPhysicalGoods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_sellingPhysicalGoods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_selfShippingProduct(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfShippingProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_selfShippingProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_shippingDelay(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_shippingDelay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_shippingDelay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_transactionLibele(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_transactionLibele(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionLibele, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_transactionLibele(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_abregedLibele(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_abregedLibele(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbregedLibele, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_abregedLibele(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_email(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_rccm(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_rccm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rccm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_rccm(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enterprise_sector(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Enterprise_sector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Enterprise_sector(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall__id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_website(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_website(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_walletPublicKey(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_walletPublicKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletPublicKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_walletPublicKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_country(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnterpriseSmall_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnterpriseSmall_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Adress)
	fc.Result = res
	return ec.marshalOAdress2ᚖserverᚋgraphᚋmodelᚐAdress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnterpriseSmall_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnterpriseSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_Adress_title(ctx, field)
			case "location":
				return ec.fieldContext_Adress_location(ctx, field)
			case "is_chosed":
				return ec.fieldContext_Adress_is_chosed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Adress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_filename(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_filename(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_filename(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_mimetype(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_mimetype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mimetype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_mimetype(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_encoding(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_encoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_encoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keypair_publicKey(ctx context.Context, field graphql.CollectedField, obj *model.Keypair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keypair_publicKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keypair_publicKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keypair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keypair_secretKey(ctx context.Context, field graphql.CollectedField, obj *model.Keypair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keypair_secretKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keypair_secretKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keypair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_latitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_longitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_connect(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_connect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Connect(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_connect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_connect_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["user"].(*model.UserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.TokenVerify == nil {
				return nil, errors.New("directive tokenVerify is not implemented")
			}
			return ec.directives.TokenVerify(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.UserCreated); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.UserCreated`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserCreated)
	fc.Result = res
	return ec.marshalNUserCreated2ᚖserverᚋgraphᚋmodelᚐUserCreated(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_UserCreated_user(ctx, field)
			case "customToken":
				return ec.fieldContext_UserCreated_customToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCreated", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteUser(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendEmail(rctx, fc.Args["email"].(*model.EmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_suscribeToNewsLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_suscribeToNewsLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SuscribeToNewsLetter(rctx, fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_suscribeToNewsLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_suscribeToNewsLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTransfer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTransfer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTransfer(rctx, fc.Args["address"].(*string), fc.Args["token"].(string), fc.Args["amount"].(float64), fc.Args["pinCode"].(string), fc.Args["destinationUser"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTransfer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProfilePicture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProfilePicture(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateProfilePicture(rctx, fc.Args["link"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProfilePicture(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProfilePicture_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateContact(rctx, fc.Args["contact"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveContact(rctx, fc.Args["contact_id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addAGency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addAGency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddAGency(rctx, fc.Args["agency"].(model.AgencyInpyt), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "MANAGMENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addAGency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addAGency_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addWithDraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addWithDraw(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddWithDraw(rctx, fc.Args["withdraw"].(model.WithdrawInput), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addWithDraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addWithDraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addTopUp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addTopUp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddTopUp(rctx, fc.Args["topup"].(model.TopUpInput), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addTopUp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addTopUp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_confirmTransactionAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_confirmTransactionAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ConfirmTransactionAgent(rctx, fc.Args["transaction_id"].(string), fc.Args["type"].(model.PaymentType), fc.Args["token"].(string), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_confirmTransactionAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_confirmTransactionAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelTransactionAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelTransactionAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CancelTransactionAgent(rctx, fc.Args["transaction_id"].(*string), fc.Args["type"].(*model.PaymentType), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelTransactionAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelTransactionAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelTransactionUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelTransactionUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CancelTransactionUser(rctx, fc.Args["transaction_id"].(*string), fc.Args["type"].(*model.PaymentType), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelTransactionUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelTransactionUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setIsOnline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setIsOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetIsOnline(rctx, fc.Args["toggle"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setIsOnline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setIsOnline_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFcmToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateFcmToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFcmToken(rctx, fc.Args["fcmToken"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateFcmToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFcmToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changePinCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changePinCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangePinCode(rctx, fc.Args["newPin"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changePinCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changePinCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setAllNotificationToRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setAllNotificationToRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetAllNotificationToRead(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setAllNotificationToRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UploadFile(rctx, fc.Args["file"].(graphql.Upload), fc.Args["type"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "OWNER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive1, requires)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖserverᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_User__id(ctx, field)
			case "firebaseUID":
				return ec.fieldContext_User_firebaseUID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "phonenumber":
				return ec.fieldContext_User_phonenumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "photoUrl":
				return ec.fieldContext_User_photoUrl(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "defaultCurrency":
				return ec.fieldContext_User_defaultCurrency(ctx, field)
			case "adresses":
				return ec.fieldContext_User_adresses(ctx, field)
			case "fcmToken":
				return ec.fieldContext_User_fcmToken(ctx, field)
			case "rating":
				return ec.fieldContext_User_rating(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "currency":
				return ec.fieldContext_User_currency(ctx, field)
			case "birth_date":
				return ec.fieldContext_User_birth_date(ctx, field)
			case "notificationPermission":
				return ec.fieldContext_User_notificationPermission(ctx, field)
			case "fee":
				return ec.fieldContext_User_fee(ctx, field)
			case "is_online":
				return ec.fieldContext_User_is_online(ctx, field)
			case "indentityStatus":
				return ec.fieldContext_User_indentityStatus(ctx, field)
			case "residenceProofStatus":
				return ec.fieldContext_User_residenceProofStatus(ctx, field)
			case "default_method":
				return ec.fieldContext_User_default_method(ctx, field)
			case "keypair":
				return ec.fieldContext_User_keypair(ctx, field)
			case "deleted":
				return ec.fieldContext_User_deleted(ctx, field)
			case "pinCode":
				return ec.fieldContext_User_pinCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reportTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reportTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReportTransaction(rctx, fc.Args["transaction_id"].(string), fc.Args["message"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reportTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reportTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AssignRole(rctx, fc.Args["userId"].(string), fc.Args["role"].(string), fc.Args["pinCode"].(string), fc.Args["token"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unassignRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unassignRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnassignRole(rctx, fc.Args["userId"].(string), fc.Args["role"].(string), fc.Args["pinCode"].(string), fc.Args["token"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unassignRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unassignRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateEnterprise(rctx, fc.Args["enterprise"].(model.EnterpriseInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticateForPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticateForPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AuthenticateForPayment(rctx, fc.Args["amount"].(float64), fc.Args["ref"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.AuthCommerce == nil {
				return nil, errors.New("directive authCommerce is not implemented")
			}
			return ec.directives.AuthCommerce(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.QRCodeOwner); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be server/graph/model.QRCodeOwner`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.QRCodeOwner)
	fc.Result = res
	return ec.marshalNQRCodeOwner2serverᚋgraphᚋmodelᚐQRCodeOwner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticateForPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QRCodeOwner does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_authenticateForPayment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recreateEnterprisePublishableKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recreateEnterprisePublishableKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RecreateEnterprisePublishableKey(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recreateEnterprisePublishableKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recreateEnterprisePublishableKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recreateEnterprisePrivateKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recreateEnterprisePrivateKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RecreateEnterprisePrivateKey(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recreateEnterprisePrivateKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recreateEnterprisePrivateKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveEnterprise(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeDefaultEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeDefaultEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangeDefaultEnterprise(rctx, fc.Args["enterpriseId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeDefaultEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeDefaultEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEnterpriseType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEnterpriseType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateEnterpriseType(rctx, fc.Args["enterpriseId"].(string), fc.Args["type"].(string), fc.Args["country"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEnterpriseType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEnterpriseType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePersonnalInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePersonnalInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePersonnalInformation(rctx, fc.Args["enterpriseId"].(string), fc.Args["first_name"].(string), fc.Args["last_name"].(string), fc.Args["email"].(string), fc.Args["address"].(string), fc.Args["city"].(string), fc.Args["state"].(string), fc.Args["zip"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePersonnalInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePersonnalInformation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEnterpriseInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEnterpriseInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateEnterpriseInformation(rctx, fc.Args["enterpriseId"].(string), fc.Args["rccm"].(string), fc.Args["sector"].(string), fc.Args["website"].(*string), fc.Args["description"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEnterpriseInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEnterpriseInformation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateExecutionInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateExecutionInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateExecutionInformation(rctx, fc.Args["enterpriseId"].(string), fc.Args["sellingPyshicalGoods"].(*bool), fc.Args["selfShipping"].(*bool), fc.Args["shippingDelay"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateExecutionInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateExecutionInformation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePublicInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePublicInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePublicInformation(rctx, fc.Args["enterpriseId"].(string), fc.Args["name"].(string), fc.Args["libelle"].(string), fc.Args["libelleAbreged"].(string), fc.Args["email"].(*string), fc.Args["phone"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePublicInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePublicInformation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_payUnConfirmedTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_payUnConfirmedTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PayUnConfirmedTransaction(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string), fc.Args["transactionId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_payUnConfirmedTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_payUnConfirmedTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_payEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_payEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PayEnterprise(rctx, fc.Args["enterpriseId"].(string), fc.Args["amount"].(float64), fc.Args["pinCode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_payEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_payEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refundTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refundTransaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RefundTransaction(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string), fc.Args["transactionId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refundTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refundTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelTransactionEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelTransactionEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CancelTransactionEnterprise(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string), fc.Args["transactionId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelTransactionEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelTransactionEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transferMoneyEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transferMoneyEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TransferMoneyEnterprise(rctx, fc.Args["enterpriseId"].(string), fc.Args["pinCode"].(string), fc.Args["publicKey"].(string), fc.Args["amount"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.AuthWithPin == nil {
				return nil, errors.New("directive authWithPin is not implemented")
			}
			return ec.directives.AuthWithPin(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transferMoneyEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_transferMoneyEnterprise_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notification__id(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_text(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_type(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_imgUrl(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_imgUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImgURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_imgUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_isRead(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_isRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_isRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_from(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Notification().From(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSmall)
	fc.Result = res
	return ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_from(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement__id(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_status(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PaymentStatus)
	fc.Result = res
	return ec.marshalNPaymentStatus2serverᚋgraphᚋmodelᚐPaymentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PaymentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_type(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PaymentType)
	fc.Result = res
	return ec.marshalNPaymentType2serverᚋgraphᚋmodelᚐPaymentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PaymentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_creator(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Creator(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSmall)
	fc.Result = res
	return ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_token(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_amount(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Amount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_fee(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_fee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Fee(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_fee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_feeEnterprise(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_feeEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().FeeEnterprise(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_feeEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_cancellor(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_cancellor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Cancellor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSmall)
	fc.Result = res
	return ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_cancellor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_agency(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_agency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Agency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Agency)
	fc.Result = res
	return ec.marshalOAgency2ᚖserverᚋgraphᚋmodelᚐAgency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_agency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Agency__id(ctx, field)
			case "title":
				return ec.fieldContext_Agency_title(ctx, field)
			case "address":
				return ec.fieldContext_Agency_address(ctx, field)
			case "status":
				return ec.fieldContext_Agency_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Agency_createdAt(ctx, field)
			case "city":
				return ec.fieldContext_Agency_city(ctx, field)
			case "country":
				return ec.fieldContext_Agency_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Agency", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_agencyId(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_agencyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_agencyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_destination(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_destination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_destination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_validator(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_validator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Validator(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSmall)
	fc.Result = res
	return ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_validator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_transactionId(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_transactionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_transactionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_description(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_shortId(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_shortId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_shortId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_destinationUser(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_destinationUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().DestinationUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserSmall)
	fc.Result = res
	return ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_destinationUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_enterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Paiement().Enterprise(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseSmall)
	fc.Result = res
	return ec.marshalOEnterpriseSmall2ᚖserverᚋgraphᚋmodelᚐEnterpriseSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_enterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_EnterpriseSmall__id(ctx, field)
			case "name":
				return ec.fieldContext_EnterpriseSmall_name(ctx, field)
			case "website":
				return ec.fieldContext_EnterpriseSmall_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_EnterpriseSmall_logoUrl(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_EnterpriseSmall_walletPublicKey(ctx, field)
			case "country":
				return ec.fieldContext_EnterpriseSmall_country(ctx, field)
			case "address":
				return ec.fieldContext_EnterpriseSmall_address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EnterpriseSmall", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Paiement_enterpriseId(ctx context.Context, field graphql.CollectedField, obj *model.Paiement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Paiement_enterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Paiement_enterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Paiement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_first_name(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_first_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_first_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_last_name(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_last_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_last_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_email(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_address(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_city(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_zip(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Person_state(ctx context.Context, field graphql.CollectedField, obj *model.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Person_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Person_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userExist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userExist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserExist(rctx, fc.Args["uid"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userExist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userExist_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_usersExist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_usersExist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UsersExist(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "OWNER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖserverᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_usersExist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_User__id(ctx, field)
			case "firebaseUID":
				return ec.fieldContext_User_firebaseUID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "phonenumber":
				return ec.fieldContext_User_phonenumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "photoUrl":
				return ec.fieldContext_User_photoUrl(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "defaultCurrency":
				return ec.fieldContext_User_defaultCurrency(ctx, field)
			case "adresses":
				return ec.fieldContext_User_adresses(ctx, field)
			case "fcmToken":
				return ec.fieldContext_User_fcmToken(ctx, field)
			case "rating":
				return ec.fieldContext_User_rating(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "currency":
				return ec.fieldContext_User_currency(ctx, field)
			case "birth_date":
				return ec.fieldContext_User_birth_date(ctx, field)
			case "notificationPermission":
				return ec.fieldContext_User_notificationPermission(ctx, field)
			case "fee":
				return ec.fieldContext_User_fee(ctx, field)
			case "is_online":
				return ec.fieldContext_User_is_online(ctx, field)
			case "indentityStatus":
				return ec.fieldContext_User_indentityStatus(ctx, field)
			case "residenceProofStatus":
				return ec.fieldContext_User_residenceProofStatus(ctx, field)
			case "default_method":
				return ec.fieldContext_User_default_method(ctx, field)
			case "keypair":
				return ec.fieldContext_User_keypair(ctx, field)
			case "deleted":
				return ec.fieldContext_User_deleted(ctx, field)
			case "pinCode":
				return ec.fieldContext_User_pinCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_loadNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loadNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LoadNotification(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Notification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Notification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕᚖserverᚋgraphᚋmodelᚐNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loadNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Notification__id(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "imgUrl":
				return ec.fieldContext_Notification_imgUrl(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "from":
				return ec.fieldContext_Notification_from(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_loadNotificationCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loadNotificationCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LoadNotificationCount(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loadNotificationCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_loadBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loadBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LoadBalance(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Wallet); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Wallet`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Wallet)
	fc.Result = res
	return ec.marshalNWallet2ᚖserverᚋgraphᚋmodelᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loadBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Wallet_address(ctx, field)
			case "amount":
				return ec.fieldContext_Wallet_amount(ctx, field)
			case "isFrozen":
				return ec.fieldContext_Wallet_isFrozen(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Wallet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchUser(rctx, fc.Args["searchText"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.UserSmall); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.UserSmall`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserSmall)
	fc.Result = res
	return ec.marshalNUserSmall2ᚕᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllUserContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllUserContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllUserContact(rctx, fc.Args["searchText"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.UserSmall); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.UserSmall`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserSmall)
	fc.Result = res
	return ec.marshalNUserSmall2ᚕᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllUserContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllUserContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllContactNotAdded(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllContactNotAdded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllContactNotAdded(rctx, fc.Args["searchText"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.UserSmall); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.UserSmall`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserSmall)
	fc.Result = res
	return ec.marshalNUserSmall2ᚕᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllContactNotAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_UserSmall__id(ctx, field)
			case "first_name":
				return ec.fieldContext_UserSmall_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_UserSmall_last_name(ctx, field)
			case "photoUrl":
				return ec.fieldContext_UserSmall_photoUrl(ctx, field)
			case "keypair":
				return ec.fieldContext_UserSmall_keypair(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSmall", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllContactNotAdded_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetActivity(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚕᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_loadQRCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loadQRCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LoadQRCode(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loadQRCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_loadTokenSupply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loadTokenSupply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LoadTokenSupply(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loadTokenSupply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_loadTokenSupply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveAllAgnecies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveAllAgnecies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RetrieveAllAgnecies(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Agency); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Agency`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Agency)
	fc.Result = res
	return ec.marshalNAgency2ᚕᚖserverᚋgraphᚋmodelᚐAgencyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveAllAgnecies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Agency__id(ctx, field)
			case "title":
				return ec.fieldContext_Agency_title(ctx, field)
			case "address":
				return ec.fieldContext_Agency_address(ctx, field)
			case "status":
				return ec.fieldContext_Agency_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Agency_createdAt(ctx, field)
			case "city":
				return ec.fieldContext_Agency_city(ctx, field)
			case "country":
				return ec.fieldContext_Agency_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Agency", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveAllAgenciesTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveAllAgenciesTransactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RetrieveAllAgenciesTransactions(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚕᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveAllAgenciesTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllParticipatingTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllParticipatingTransactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllParticipatingTransactions(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚕᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllParticipatingTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getQrOwner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getQrOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetQROwner(rctx, fc.Args["qrcode"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(model.QRCodeOwner); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be server/graph/model.QRCodeOwner`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.QRCodeOwner)
	fc.Result = res
	return ec.marshalNQRCodeOwner2serverᚋgraphᚋmodelᚐQRCodeOwner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getQrOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QRCodeOwner does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getQrOwner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTransactionByIdUnauthed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTransactionByIdUnauthed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTransactionByIDUnauthed(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Paiement)
	fc.Result = res
	return ec.marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTransactionByIdUnauthed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTransactionByIdUnauthed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTransactionById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTransactionById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetTransactionByID(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Paiement)
	fc.Result = res
	return ec.marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTransactionById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTransactionById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTransactionByIdAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTransactionByIdAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetTransactionByIDAgent(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "AGENT_ROLE")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Paiement); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Paiement`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Paiement)
	fc.Result = res
	return ec.marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTransactionByIdAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTransactionByIdAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getselfEmployedPDF(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getselfEmployedPDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetselfEmployedPDF(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getselfEmployedPDF(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllUserEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllUserEnterprise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllUserEnterprise(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllUserEnterprise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllTransactionByEnterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetAllTransactionByEnterpriseID(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string), fc.Args["limit"].(float64), fc.Args["skip"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TransactionWithPageInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.TransactionWithPageInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TransactionWithPageInfo)
	fc.Result = res
	return ec.marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transactions":
				return ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
			case "pageTotal":
				return ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionWithPageInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllTransactionByEnterpriseId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSuccessFullTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSuccessFullTransactionByEnterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetSuccessFullTransactionByEnterpriseID(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string), fc.Args["limit"].(float64), fc.Args["skip"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TransactionWithPageInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.TransactionWithPageInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TransactionWithPageInfo)
	fc.Result = res
	return ec.marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSuccessFullTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transactions":
				return ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
			case "pageTotal":
				return ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionWithPageInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSuccessFullTransactionByEnterpriseId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRefundedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getRefundedTransactionByEnterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetRefundedTransactionByEnterpriseID(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string), fc.Args["limit"].(float64), fc.Args["skip"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TransactionWithPageInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.TransactionWithPageInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TransactionWithPageInfo)
	fc.Result = res
	return ec.marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getRefundedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transactions":
				return ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
			case "pageTotal":
				return ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionWithPageInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRefundedTransactionByEnterpriseId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getNonCapturedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getNonCapturedTransactionByEnterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetNonCapturedTransactionByEnterpriseID(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string), fc.Args["limit"].(float64), fc.Args["skip"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TransactionWithPageInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.TransactionWithPageInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TransactionWithPageInfo)
	fc.Result = res
	return ec.marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getNonCapturedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transactions":
				return ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
			case "pageTotal":
				return ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionWithPageInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getNonCapturedTransactionByEnterpriseId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getFailedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getFailedTransactionByEnterpriseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetFailedTransactionByEnterpriseID(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string), fc.Args["limit"].(float64), fc.Args["skip"].(float64))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TransactionWithPageInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.TransactionWithPageInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TransactionWithPageInfo)
	fc.Result = res
	return ec.marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getFailedTransactionByEnterpriseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transactions":
				return ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
			case "pageTotal":
				return ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionWithPageInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getFailedTransactionByEnterpriseId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProfilNetChartData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProfilNetChartData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProfilNetChartData(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ChartData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.ChartData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChartData)
	fc.Result = res
	return ec.marshalNChartData2ᚖserverᚋgraphᚋmodelᚐChartData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProfilNetChartData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentTotal":
				return ec.fieldContext_ChartData_currentTotal(ctx, field)
			case "formerTotal":
				return ec.fieldContext_ChartData_formerTotal(ctx, field)
			case "pourcentageDifference":
				return ec.fieldContext_ChartData_pourcentageDifference(ctx, field)
			case "isPositive":
				return ec.fieldContext_ChartData_isPositive(ctx, field)
			case "chart":
				return ec.fieldContext_ChartData_chart(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProfilNetChartData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProfilBrutChartData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProfilBrutChartData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProfilBrutChartData(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ChartData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.ChartData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChartData)
	fc.Result = res
	return ec.marshalNChartData2ᚖserverᚋgraphᚋmodelᚐChartData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProfilBrutChartData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentTotal":
				return ec.fieldContext_ChartData_currentTotal(ctx, field)
			case "formerTotal":
				return ec.fieldContext_ChartData_formerTotal(ctx, field)
			case "pourcentageDifference":
				return ec.fieldContext_ChartData_pourcentageDifference(ctx, field)
			case "isPositive":
				return ec.fieldContext_ChartData_isPositive(ctx, field)
			case "chart":
				return ec.fieldContext_ChartData_chart(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProfilBrutChartData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProfilNonCarpturedChartData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProfilNonCarpturedChartData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetProfilNonCarpturedChartData(rctx, fc.Args["enterpriseId"].(string), fc.Args["from"].(string), fc.Args["to"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ChartData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.ChartData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChartData)
	fc.Result = res
	return ec.marshalNChartData2ᚖserverᚋgraphᚋmodelᚐChartData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProfilNonCarpturedChartData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentTotal":
				return ec.fieldContext_ChartData_currentTotal(ctx, field)
			case "formerTotal":
				return ec.fieldContext_ChartData_formerTotal(ctx, field)
			case "pourcentageDifference":
				return ec.fieldContext_ChartData_pourcentageDifference(ctx, field)
			case "isPositive":
				return ec.fieldContext_ChartData_isPositive(ctx, field)
			case "chart":
				return ec.fieldContext_ChartData_chart(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProfilNonCarpturedChartData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEnterpriseBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEnterpriseBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEnterpriseBalance(rctx, fc.Args["enterpriseId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEnterpriseBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEnterpriseBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEntrepriseById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEntrepriseById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetEntrepriseByID(rctx, fc.Args["enterpriseId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Enterprise); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.Enterprise`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEntrepriseById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Enterprise__id(ctx, field)
			case "type":
				return ec.fieldContext_Enterprise_type(ctx, field)
			case "name":
				return ec.fieldContext_Enterprise_name(ctx, field)
			case "website":
				return ec.fieldContext_Enterprise_website(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Enterprise_logoUrl(ctx, field)
			case "creator":
				return ec.fieldContext_Enterprise_creator(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enterprise_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enterprise_updatedAt(ctx, field)
			case "person":
				return ec.fieldContext_Enterprise_person(ctx, field)
			case "publishableKey":
				return ec.fieldContext_Enterprise_publishableKey(ctx, field)
			case "private_key":
				return ec.fieldContext_Enterprise_private_key(ctx, field)
			case "walletPublicKey":
				return ec.fieldContext_Enterprise_walletPublicKey(ctx, field)
			case "walletSecretKey":
				return ec.fieldContext_Enterprise_walletSecretKey(ctx, field)
			case "country":
				return ec.fieldContext_Enterprise_country(ctx, field)
			case "address":
				return ec.fieldContext_Enterprise_address(ctx, field)
			case "default_enterprise":
				return ec.fieldContext_Enterprise_default_enterprise(ctx, field)
			case "description":
				return ec.fieldContext_Enterprise_description(ctx, field)
			case "sellingPhysicalGoods":
				return ec.fieldContext_Enterprise_sellingPhysicalGoods(ctx, field)
			case "selfShippingProduct":
				return ec.fieldContext_Enterprise_selfShippingProduct(ctx, field)
			case "shippingDelay":
				return ec.fieldContext_Enterprise_shippingDelay(ctx, field)
			case "transactionLibele":
				return ec.fieldContext_Enterprise_transactionLibele(ctx, field)
			case "abregedLibele":
				return ec.fieldContext_Enterprise_abregedLibele(ctx, field)
			case "phone":
				return ec.fieldContext_Enterprise_phone(ctx, field)
			case "email":
				return ec.fieldContext_Enterprise_email(ctx, field)
			case "rccm":
				return ec.fieldContext_Enterprise_rccm(ctx, field)
			case "sector":
				return ec.fieldContext_Enterprise_sector(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enterprise", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEntrepriseById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPdf(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPdf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GetPDF(rctx, fc.Args["enterpriseId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPdf(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPdf_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RatingUser_rating_total(ctx context.Context, field graphql.CollectedField, obj *model.RatingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RatingUser_rating_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RatingUser_rating_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RatingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RatingUser_rating_count(ctx context.Context, field graphql.CollectedField, obj *model.RatingUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RatingUser_rating_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RatingUser_rating_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RatingUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_notificationAdded(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_notificationAdded(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().NotificationAdded(rctx, fc.Args["listener"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.Notification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *server/graph/model.Notification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Notification):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalONotification2ᚖserverᚋgraphᚋmodelᚐNotification(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_notificationAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Notification__id(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "imgUrl":
				return ec.fieldContext_Notification_imgUrl(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "from":
				return ec.fieldContext_Notification_from(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_notificationAdded_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_transactionPayed(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_transactionPayed(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().TransactionPayed(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Paiement):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_transactionPayed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_transactionPayed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_contactAdded(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_contactAdded(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().ContactAdded(rctx, fc.Args["listener"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, nil, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.Notification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *server/graph/model.Notification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Notification):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalONotification2ᚖserverᚋgraphᚋmodelᚐNotification(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_contactAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Notification__id(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "imgUrl":
				return ec.fieldContext_Notification_imgUrl(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "from":
				return ec.fieldContext_Notification_from(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_contactAdded_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TransactionWithPageInfo_transactions(ctx context.Context, field graphql.CollectedField, obj *model.TransactionWithPageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionWithPageInfo_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Paiement)
	fc.Result = res
	return ec.marshalNPaiement2ᚕᚖserverᚋgraphᚋmodelᚐPaiement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionWithPageInfo_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionWithPageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Paiement__id(ctx, field)
			case "status":
				return ec.fieldContext_Paiement_status(ctx, field)
			case "type":
				return ec.fieldContext_Paiement_type(ctx, field)
			case "creator":
				return ec.fieldContext_Paiement_creator(ctx, field)
			case "token":
				return ec.fieldContext_Paiement_token(ctx, field)
			case "amount":
				return ec.fieldContext_Paiement_amount(ctx, field)
			case "fee":
				return ec.fieldContext_Paiement_fee(ctx, field)
			case "feeEnterprise":
				return ec.fieldContext_Paiement_feeEnterprise(ctx, field)
			case "cancellor":
				return ec.fieldContext_Paiement_cancellor(ctx, field)
			case "agency":
				return ec.fieldContext_Paiement_agency(ctx, field)
			case "agencyId":
				return ec.fieldContext_Paiement_agencyId(ctx, field)
			case "destination":
				return ec.fieldContext_Paiement_destination(ctx, field)
			case "validator":
				return ec.fieldContext_Paiement_validator(ctx, field)
			case "transactionId":
				return ec.fieldContext_Paiement_transactionId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Paiement_createdAt(ctx, field)
			case "description":
				return ec.fieldContext_Paiement_description(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Paiement_updatedAt(ctx, field)
			case "shortId":
				return ec.fieldContext_Paiement_shortId(ctx, field)
			case "destinationUser":
				return ec.fieldContext_Paiement_destinationUser(ctx, field)
			case "enterprise":
				return ec.fieldContext_Paiement_enterprise(ctx, field)
			case "enterpriseId":
				return ec.fieldContext_Paiement_enterpriseId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Paiement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionWithPageInfo_pageTotal(ctx context.Context, field graphql.CollectedField, obj *model.TransactionWithPageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionWithPageInfo_pageTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionWithPageInfo_pageTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionWithPageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User__id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firebaseUID(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firebaseUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirebaseUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firebaseUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_first_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_first_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_first_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_last_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_last_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_last_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phonenumber(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phonenumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phonenumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phonenumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_photoUrl(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_photoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_photoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_defaultCurrency(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_defaultCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_defaultCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_adresses(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_adresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Adress)
	fc.Result = res
	return ec.marshalOAdress2ᚕᚖserverᚋgraphᚋmodelᚐAdress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_adresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_Adress_title(ctx, field)
			case "location":
				return ec.fieldContext_Adress_location(ctx, field)
			case "is_chosed":
				return ec.fieldContext_Adress_is_chosed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Adress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_fcmToken(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_fcmToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FcmToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_fcmToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_rating(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RatingUser)
	fc.Result = res
	return ec.marshalORatingUser2ᚖserverᚋgraphᚋmodelᚐRatingUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "rating_total":
				return ec.fieldContext_RatingUser_rating_total(ctx, field)
			case "rating_count":
				return ec.fieldContext_RatingUser_rating_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RatingUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_permissions(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Role)
	fc.Result = res
	return ec.marshalORole2ᚕᚖserverᚋgraphᚋmodelᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_country(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_contacts(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_wallet(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_wallet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wallet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Wallet)
	fc.Result = res
	return ec.marshalOWallet2ᚖserverᚋgraphᚋmodelᚐWallet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_wallet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Wallet_address(ctx, field)
			case "amount":
				return ec.fieldContext_Wallet_amount(ctx, field)
			case "isFrozen":
				return ec.fieldContext_Wallet_isFrozen(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Wallet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_currency(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_birth_date(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_birth_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BirthDateOut)
	fc.Result = res
	return ec.marshalOBirthDateOut2ᚖserverᚋgraphᚋmodelᚐBirthDateOut(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_birth_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_BirthDateOut_day(ctx, field)
			case "month":
				return ec.fieldContext_BirthDateOut_month(ctx, field)
			case "year":
				return ec.fieldContext_BirthDateOut_year(ctx, field)
			case "iso":
				return ec.fieldContext_BirthDateOut_iso(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BirthDateOut", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notificationPermission(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notificationPermission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notificationPermission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_fee(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_fee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_fee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_is_online(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_is_online(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_is_online(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_indentityStatus(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_indentityStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndentityStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IdentityStatus)
	fc.Result = res
	return ec.marshalOIdentityStatus2ᚖserverᚋgraphᚋmodelᚐIdentityStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_indentityStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IdentityStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_residenceProofStatus(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_residenceProofStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidenceProofStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResidenceProofStatus)
	fc.Result = res
	return ec.marshalOResidenceProofStatus2ᚖserverᚋgraphᚋmodelᚐResidenceProofStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_residenceProofStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResidenceProofStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_default_method(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_default_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_default_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_keypair(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_keypair(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keypair, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Keypair)
	fc.Result = res
	return ec.marshalOKeypair2ᚖserverᚋgraphᚋmodelᚐKeypair(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_keypair(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "publicKey":
				return ec.fieldContext_Keypair_publicKey(ctx, field)
			case "secretKey":
				return ec.fieldContext_Keypair_secretKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Keypair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_deleted(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_deleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_deleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_pinCode(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_pinCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_pinCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCreated_user(ctx context.Context, field graphql.CollectedField, obj *model.UserCreated) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCreated_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.User, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			requires, err := ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, "OWNER")
			if err != nil {
				return nil, err
			}
			if ec.directives.Auth == nil {
				return nil, errors.New("directive auth is not implemented")
			}
			return ec.directives.Auth(ctx, obj, directive0, requires)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *server/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖserverᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCreated_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCreated",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_User__id(ctx, field)
			case "firebaseUID":
				return ec.fieldContext_User_firebaseUID(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "phonenumber":
				return ec.fieldContext_User_phonenumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "photoUrl":
				return ec.fieldContext_User_photoUrl(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "defaultCurrency":
				return ec.fieldContext_User_defaultCurrency(ctx, field)
			case "adresses":
				return ec.fieldContext_User_adresses(ctx, field)
			case "fcmToken":
				return ec.fieldContext_User_fcmToken(ctx, field)
			case "rating":
				return ec.fieldContext_User_rating(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "currency":
				return ec.fieldContext_User_currency(ctx, field)
			case "birth_date":
				return ec.fieldContext_User_birth_date(ctx, field)
			case "notificationPermission":
				return ec.fieldContext_User_notificationPermission(ctx, field)
			case "fee":
				return ec.fieldContext_User_fee(ctx, field)
			case "is_online":
				return ec.fieldContext_User_is_online(ctx, field)
			case "indentityStatus":
				return ec.fieldContext_User_indentityStatus(ctx, field)
			case "residenceProofStatus":
				return ec.fieldContext_User_residenceProofStatus(ctx, field)
			case "default_method":
				return ec.fieldContext_User_default_method(ctx, field)
			case "keypair":
				return ec.fieldContext_User_keypair(ctx, field)
			case "deleted":
				return ec.fieldContext_User_deleted(ctx, field)
			case "pinCode":
				return ec.fieldContext_User_pinCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCreated_customToken(ctx context.Context, field graphql.CollectedField, obj *model.UserCreated) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCreated_customToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCreated_customToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCreated",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSmall__id(ctx context.Context, field graphql.CollectedField, obj *model.UserSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSmall__id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSmall__id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSmall_first_name(ctx context.Context, field graphql.CollectedField, obj *model.UserSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSmall_first_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSmall_first_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSmall_last_name(ctx context.Context, field graphql.CollectedField, obj *model.UserSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSmall_last_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSmall_last_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSmall_photoUrl(ctx context.Context, field graphql.CollectedField, obj *model.UserSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSmall_photoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSmall_photoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSmall_keypair(ctx context.Context, field graphql.CollectedField, obj *model.UserSmall) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSmall_keypair(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keypair, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Keypair)
	fc.Result = res
	return ec.marshalOKeypair2ᚖserverᚋgraphᚋmodelᚐKeypair(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSmall_keypair(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSmall",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "publicKey":
				return ec.fieldContext_Keypair_publicKey(ctx, field)
			case "secretKey":
				return ec.fieldContext_Keypair_secretKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Keypair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Wallet_address(ctx context.Context, field graphql.CollectedField, obj *model.Wallet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Wallet_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Wallet_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Wallet_amount(ctx context.Context, field graphql.CollectedField, obj *model.Wallet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Wallet_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Wallet_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Wallet_isFrozen(ctx context.Context, field graphql.CollectedField, obj *model.Wallet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Wallet_isFrozen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFrozen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Wallet_isFrozen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Wallet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdressInput(ctx context.Context, obj interface{}) (model.AdressInput, error) {
	var it model.AdressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "location", "is_chosed", "city"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOLocationInput2ᚖserverᚋgraphᚋmodelᚐLocationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_chosed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_chosed"))
			it.IsChosed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAgencyInpyt(ctx context.Context, obj interface{}) (model.AgencyInpyt, error) {
	var it model.AgencyInpyt
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "address", "city", "country", "token"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBirthDate(ctx context.Context, obj interface{}) (model.BirthDate, error) {
	var it model.BirthDate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"day", "month", "year", "iso"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "iso":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iso"))
			it.Iso, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailInput(ctx context.Context, obj interface{}) (model.EmailInput, error) {
	var it model.EmailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "message"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseInput(ctx context.Context, obj interface{}) (model.EnterpriseInput, error) {
	var it model.EnterpriseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "country", "address", "logoUrl", "website", "type", "rccm", "activitySector", "person", "description", "sellingPhysicalGoods", "selfShippingProduct", "shippingDelay", "transactionLibele", "abregedLibele", "phone", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNAdressInput2ᚖserverᚋgraphᚋmodelᚐAdressInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "logoUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoUrl"))
			it.LogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNEnterpriseType2serverᚋgraphᚋmodelᚐEnterpriseType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rccm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rccm"))
			it.Rccm, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "activitySector":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activitySector"))
			it.ActivitySector, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("person"))
			it.Person, err = ec.unmarshalOPersonInput2ᚖserverᚋgraphᚋmodelᚐPersonInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellingPhysicalGoods":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellingPhysicalGoods"))
			it.SellingPhysicalGoods, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "selfShippingProduct":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selfShippingProduct"))
			it.SelfShippingProduct, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "shippingDelay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingDelay"))
			it.ShippingDelay, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "transactionLibele":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transactionLibele"))
			it.TransactionLibele, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "abregedLibele":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abregedLibele"))
			it.AbregedLibele, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKeypairInput(ctx context.Context, obj interface{}) (model.KeypairInput, error) {
	var it model.KeypairInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"publicKey", "secretKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "publicKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicKey"))
			it.PublicKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			it.SecretKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationInput(ctx context.Context, obj interface{}) (model.LocationInput, error) {
	var it model.LocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"latitude", "longitude"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOwnerRule(ctx context.Context, obj interface{}) (model.OwnerRule, error) {
	var it model.OwnerRule
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"allow", "ownerField", "operations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "allow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allow"))
			it.Allow, err = ec.unmarshalOAuthStrategy2ᚖserverᚋgraphᚋmodelᚐAuthStrategy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerField":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerField"))
			it.OwnerField, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operations"))
			it.Operations, err = ec.unmarshalOModelOperation2ᚕᚖserverᚋgraphᚋmodelᚐModelOperation(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPersonInput(ctx context.Context, obj interface{}) (model.PersonInput, error) {
	var it model.PersonInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first_name", "last_name", "email", "address", "city", "zip", "state"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			it.Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRatingInsideInput(ctx context.Context, obj interface{}) (model.RatingInsideInput, error) {
	var it model.RatingInsideInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rating_count", "rating_total"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rating_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating_count"))
			it.RatingCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating_total":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating_total"))
			it.RatingTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTopUpInput(ctx context.Context, obj interface{}) (model.TopUpInput, error) {
	var it model.TopUpInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "agency", "token", "destination", "destinationUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agency"))
			it.Agency, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination"))
			it.Destination, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "destinationUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationUser"))
			it.DestinationUser, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (model.UserInput, error) {
	var it model.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"adress", "display_name", "email", "first_name", "last_name", "phonenumber", "photoUrl", "website", "firebaseUID", "country", "birth_date", "fcmToken", "age", "fullDocumentImage", "personalIdNumber", "faceImage", "placeOfBirth", "sex", "race", "nationality", "expired", "documentNumber", "dateOfExpiryPermanent", "dateOfIssue", "dateOfExpiry", "pinCode", "invitedBy", "keypair", "createdAt", "updatedAt", "token", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "adress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adress"))
			it.Adress, err = ec.unmarshalNAdressInput2ᚖserverᚋgraphᚋmodelᚐAdressInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_name"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phonenumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phonenumber"))
			it.Phonenumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoUrl"))
			it.PhotoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firebaseUID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firebaseUID"))
			it.FirebaseUID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "birth_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birth_date"))
			it.BirthDate, err = ec.unmarshalNBirthDate2ᚖserverᚋgraphᚋmodelᚐBirthDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "fcmToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fcmToken"))
			it.FcmToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("age"))
			it.Age, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullDocumentImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullDocumentImage"))
			it.FullDocumentImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "personalIdNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("personalIdNumber"))
			it.PersonalIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "faceImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("faceImage"))
			it.FaceImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "placeOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeOfBirth"))
			it.PlaceOfBirth, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "race":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("race"))
			it.Race, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nationality":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
			it.Nationality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expired":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expired"))
			it.Expired, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNumber"))
			it.DocumentNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfExpiryPermanent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfExpiryPermanent"))
			it.DateOfExpiryPermanent, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfIssue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfIssue"))
			it.DateOfIssue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfExpiry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfExpiry"))
			it.DateOfExpiry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinCode"))
			it.PinCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "invitedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invitedBy"))
			it.InvitedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "keypair":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keypair"))
			it.Keypair, err = ec.unmarshalOKeypairInput2ᚖserverᚋgraphᚋmodelᚐKeypairInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWithdrawInput(ctx context.Context, obj interface{}) (model.WithdrawInput, error) {
	var it model.WithdrawInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"amount", "agency", "token", "destination", "destinationUser"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "agency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agency"))
			it.Agency, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination"))
			it.Destination, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "destinationUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationUser"))
			it.DestinationUser, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _QRCodeOwner(ctx context.Context, sel ast.SelectionSet, obj model.QRCodeOwner) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.EnterpriseSmall:
		return ec._EnterpriseSmall(ctx, sel, &obj)
	case *model.EnterpriseSmall:
		if obj == nil {
			return graphql.Null
		}
		return ec._EnterpriseSmall(ctx, sel, obj)
	case model.UserSmall:
		return ec._UserSmall(ctx, sel, &obj)
	case *model.UserSmall:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserSmall(ctx, sel, obj)
	case model.Paiement:
		return ec._Paiement(ctx, sel, &obj)
	case *model.Paiement:
		if obj == nil {
			return graphql.Null
		}
		return ec._Paiement(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var adressImplementors = []string{"Adress"}

func (ec *executionContext) _Adress(ctx context.Context, sel ast.SelectionSet, obj *model.Adress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Adress")
		case "title":

			out.Values[i] = ec._Adress_title(ctx, field, obj)

		case "location":

			out.Values[i] = ec._Adress_location(ctx, field, obj)

		case "is_chosed":

			out.Values[i] = ec._Adress_is_chosed(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var agencyImplementors = []string{"Agency"}

func (ec *executionContext) _Agency(ctx context.Context, sel ast.SelectionSet, obj *model.Agency) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, agencyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Agency")
		case "_id":

			out.Values[i] = ec._Agency__id(ctx, field, obj)

		case "title":

			out.Values[i] = ec._Agency_title(ctx, field, obj)

		case "address":

			out.Values[i] = ec._Agency_address(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Agency_status(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Agency_createdAt(ctx, field, obj)

		case "city":

			out.Values[i] = ec._Agency_city(ctx, field, obj)

		case "country":

			out.Values[i] = ec._Agency_country(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var birthDateOutImplementors = []string{"BirthDateOut"}

func (ec *executionContext) _BirthDateOut(ctx context.Context, sel ast.SelectionSet, obj *model.BirthDateOut) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, birthDateOutImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BirthDateOut")
		case "day":

			out.Values[i] = ec._BirthDateOut_day(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "month":

			out.Values[i] = ec._BirthDateOut_month(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "year":

			out.Values[i] = ec._BirthDateOut_year(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iso":

			out.Values[i] = ec._BirthDateOut_iso(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chartDataImplementors = []string{"ChartData"}

func (ec *executionContext) _ChartData(ctx context.Context, sel ast.SelectionSet, obj *model.ChartData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chartDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChartData")
		case "currentTotal":

			out.Values[i] = ec._ChartData_currentTotal(ctx, field, obj)

		case "formerTotal":

			out.Values[i] = ec._ChartData_formerTotal(ctx, field, obj)

		case "pourcentageDifference":

			out.Values[i] = ec._ChartData_pourcentageDifference(ctx, field, obj)

		case "isPositive":

			out.Values[i] = ec._ChartData_isPositive(ctx, field, obj)

		case "chart":

			out.Values[i] = ec._ChartData_chart(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseImplementors = []string{"Enterprise"}

func (ec *executionContext) _Enterprise(ctx context.Context, sel ast.SelectionSet, obj *model.Enterprise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Enterprise")
		case "_id":

			out.Values[i] = ec._Enterprise__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Enterprise_type(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Enterprise_name(ctx, field, obj)

		case "website":

			out.Values[i] = ec._Enterprise_website(ctx, field, obj)

		case "logoUrl":

			out.Values[i] = ec._Enterprise_logoUrl(ctx, field, obj)

		case "creator":

			out.Values[i] = ec._Enterprise_creator(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Enterprise_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Enterprise_updatedAt(ctx, field, obj)

		case "person":

			out.Values[i] = ec._Enterprise_person(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "publishableKey":

			out.Values[i] = ec._Enterprise_publishableKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "private_key":

			out.Values[i] = ec._Enterprise_private_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "walletPublicKey":

			out.Values[i] = ec._Enterprise_walletPublicKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "walletSecretKey":

			out.Values[i] = ec._Enterprise_walletSecretKey(ctx, field, obj)

		case "country":

			out.Values[i] = ec._Enterprise_country(ctx, field, obj)

		case "address":

			out.Values[i] = ec._Enterprise_address(ctx, field, obj)

		case "default_enterprise":

			out.Values[i] = ec._Enterprise_default_enterprise(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Enterprise_description(ctx, field, obj)

		case "sellingPhysicalGoods":

			out.Values[i] = ec._Enterprise_sellingPhysicalGoods(ctx, field, obj)

		case "selfShippingProduct":

			out.Values[i] = ec._Enterprise_selfShippingProduct(ctx, field, obj)

		case "shippingDelay":

			out.Values[i] = ec._Enterprise_shippingDelay(ctx, field, obj)

		case "transactionLibele":

			out.Values[i] = ec._Enterprise_transactionLibele(ctx, field, obj)

		case "abregedLibele":

			out.Values[i] = ec._Enterprise_abregedLibele(ctx, field, obj)

		case "phone":

			out.Values[i] = ec._Enterprise_phone(ctx, field, obj)

		case "email":

			out.Values[i] = ec._Enterprise_email(ctx, field, obj)

		case "rccm":

			out.Values[i] = ec._Enterprise_rccm(ctx, field, obj)

		case "sector":

			out.Values[i] = ec._Enterprise_sector(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseSmallImplementors = []string{"EnterpriseSmall", "QRCodeOwner"}

func (ec *executionContext) _EnterpriseSmall(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseSmall) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseSmallImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseSmall")
		case "_id":

			out.Values[i] = ec._EnterpriseSmall__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._EnterpriseSmall_name(ctx, field, obj)

		case "website":

			out.Values[i] = ec._EnterpriseSmall_website(ctx, field, obj)

		case "logoUrl":

			out.Values[i] = ec._EnterpriseSmall_logoUrl(ctx, field, obj)

		case "walletPublicKey":

			out.Values[i] = ec._EnterpriseSmall_walletPublicKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":

			out.Values[i] = ec._EnterpriseSmall_country(ctx, field, obj)

		case "address":

			out.Values[i] = ec._EnterpriseSmall_address(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *model.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "filename":

			out.Values[i] = ec._File_filename(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimetype":

			out.Values[i] = ec._File_mimetype(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "encoding":

			out.Values[i] = ec._File_encoding(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var keypairImplementors = []string{"Keypair"}

func (ec *executionContext) _Keypair(ctx context.Context, sel ast.SelectionSet, obj *model.Keypair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, keypairImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Keypair")
		case "publicKey":

			out.Values[i] = ec._Keypair_publicKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secretKey":

			out.Values[i] = ec._Keypair_secretKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *model.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "latitude":

			out.Values[i] = ec._Location_latitude(ctx, field, obj)

		case "longitude":

			out.Values[i] = ec._Location_longitude(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "connect":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_connect(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendEmail":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendEmail(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suscribeToNewsLetter":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_suscribeToNewsLetter(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTransfer":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTransfer(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProfilePicture":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProfilePicture(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createContact":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createContact(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeContact":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeContact(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addAGency":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addAGency(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addWithDraw":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addWithDraw(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addTopUp":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTopUp(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "confirmTransactionAgent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_confirmTransactionAgent(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelTransactionAgent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelTransactionAgent(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelTransactionUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelTransactionUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setIsOnline":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setIsOnline(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFcmToken":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFcmToken(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changePinCode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePinCode(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setAllNotificationToRead":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setAllNotificationToRead(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadFile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadFile(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reportTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reportTransaction(ctx, field)
			})

		case "assignRole":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignRole(ctx, field)
			})

		case "unassignRole":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unassignRole(ctx, field)
			})

		case "createEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authenticateForPayment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticateForPayment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recreateEnterprisePublishableKey":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recreateEnterprisePublishableKey(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recreateEnterprisePrivateKey":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recreateEnterprisePrivateKey(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changeDefaultEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeDefaultEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEnterpriseType":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEnterpriseType(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePersonnalInformation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePersonnalInformation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEnterpriseInformation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEnterpriseInformation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateExecutionInformation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateExecutionInformation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePublicInformation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePublicInformation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payUnConfirmedTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_payUnConfirmedTransaction(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_payEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refundTransaction":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refundTransaction(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelTransactionEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelTransactionEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "transferMoneyEnterprise":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transferMoneyEnterprise(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *model.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "_id":

			out.Values[i] = ec._Notification__id(ctx, field, obj)

		case "text":

			out.Values[i] = ec._Notification_text(ctx, field, obj)

		case "type":

			out.Values[i] = ec._Notification_type(ctx, field, obj)

		case "imgUrl":

			out.Values[i] = ec._Notification_imgUrl(ctx, field, obj)

		case "isRead":

			out.Values[i] = ec._Notification_isRead(ctx, field, obj)

		case "from":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Notification_from(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdAt":

			out.Values[i] = ec._Notification_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paiementImplementors = []string{"Paiement", "QRCodeOwner"}

func (ec *executionContext) _Paiement(ctx context.Context, sel ast.SelectionSet, obj *model.Paiement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paiementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Paiement")
		case "_id":

			out.Values[i] = ec._Paiement__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":

			out.Values[i] = ec._Paiement_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":

			out.Values[i] = ec._Paiement_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "creator":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_creator(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "token":

			out.Values[i] = ec._Paiement_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "amount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_amount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fee":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_fee(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "feeEnterprise":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_feeEnterprise(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "cancellor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_cancellor(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_agency(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agencyId":

			out.Values[i] = ec._Paiement_agencyId(ctx, field, obj)

		case "destination":

			out.Values[i] = ec._Paiement_destination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "validator":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_validator(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "transactionId":

			out.Values[i] = ec._Paiement_transactionId(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Paiement_createdAt(ctx, field, obj)

		case "description":

			out.Values[i] = ec._Paiement_description(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Paiement_updatedAt(ctx, field, obj)

		case "shortId":

			out.Values[i] = ec._Paiement_shortId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "destinationUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_destinationUser(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "enterprise":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Paiement_enterprise(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "enterpriseId":

			out.Values[i] = ec._Paiement_enterpriseId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImplementors = []string{"Person"}

func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *model.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "first_name":

			out.Values[i] = ec._Person_first_name(ctx, field, obj)

		case "last_name":

			out.Values[i] = ec._Person_last_name(ctx, field, obj)

		case "email":

			out.Values[i] = ec._Person_email(ctx, field, obj)

		case "address":

			out.Values[i] = ec._Person_address(ctx, field, obj)

		case "city":

			out.Values[i] = ec._Person_city(ctx, field, obj)

		case "zip":

			out.Values[i] = ec._Person_zip(ctx, field, obj)

		case "state":

			out.Values[i] = ec._Person_state(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "userExist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userExist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "usersExist":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_usersExist(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loadNotification":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loadNotification(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loadNotificationCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loadNotificationCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loadBalance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loadBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllUserContact":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllUserContact(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllContactNotAdded":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllContactNotAdded(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getActivity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getActivity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loadQRCode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loadQRCode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loadTokenSupply":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loadTokenSupply(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "retrieveAllAgnecies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveAllAgnecies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "retrieveAllAgenciesTransactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveAllAgenciesTransactions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllParticipatingTransactions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllParticipatingTransactions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getQrOwner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getQrOwner(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getTransactionByIdUnauthed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTransactionByIdUnauthed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getTransactionById":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTransactionById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getTransactionByIdAgent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTransactionByIdAgent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getselfEmployedPDF":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getselfEmployedPDF(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllUserEnterprise":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllUserEnterprise(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllTransactionByEnterpriseId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllTransactionByEnterpriseId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSuccessFullTransactionByEnterpriseId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSuccessFullTransactionByEnterpriseId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getRefundedTransactionByEnterpriseId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRefundedTransactionByEnterpriseId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getNonCapturedTransactionByEnterpriseId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNonCapturedTransactionByEnterpriseId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getFailedTransactionByEnterpriseId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFailedTransactionByEnterpriseId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProfilNetChartData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProfilNetChartData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProfilBrutChartData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProfilBrutChartData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProfilNonCarpturedChartData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProfilNonCarpturedChartData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getEnterpriseBalance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnterpriseBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getEntrepriseById":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEntrepriseById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPdf":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPdf(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ratingUserImplementors = []string{"RatingUser"}

func (ec *executionContext) _RatingUser(ctx context.Context, sel ast.SelectionSet, obj *model.RatingUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ratingUserImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RatingUser")
		case "rating_total":

			out.Values[i] = ec._RatingUser_rating_total(ctx, field, obj)

		case "rating_count":

			out.Values[i] = ec._RatingUser_rating_count(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "notificationAdded":
		return ec._Subscription_notificationAdded(ctx, fields[0])
	case "transactionPayed":
		return ec._Subscription_transactionPayed(ctx, fields[0])
	case "contactAdded":
		return ec._Subscription_contactAdded(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var transactionWithPageInfoImplementors = []string{"TransactionWithPageInfo"}

func (ec *executionContext) _TransactionWithPageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionWithPageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionWithPageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionWithPageInfo")
		case "transactions":

			out.Values[i] = ec._TransactionWithPageInfo_transactions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageTotal":

			out.Values[i] = ec._TransactionWithPageInfo_pageTotal(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "_id":

			out.Values[i] = ec._User__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firebaseUID":

			out.Values[i] = ec._User_firebaseUID(ctx, field, obj)

		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

		case "first_name":

			out.Values[i] = ec._User_first_name(ctx, field, obj)

		case "last_name":

			out.Values[i] = ec._User_last_name(ctx, field, obj)

		case "phonenumber":

			out.Values[i] = ec._User_phonenumber(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._User_createdAt(ctx, field, obj)

		case "photoUrl":

			out.Values[i] = ec._User_photoUrl(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._User_updatedAt(ctx, field, obj)

		case "defaultCurrency":

			out.Values[i] = ec._User_defaultCurrency(ctx, field, obj)

		case "adresses":

			out.Values[i] = ec._User_adresses(ctx, field, obj)

		case "fcmToken":

			out.Values[i] = ec._User_fcmToken(ctx, field, obj)

		case "rating":

			out.Values[i] = ec._User_rating(ctx, field, obj)

		case "permissions":

			out.Values[i] = ec._User_permissions(ctx, field, obj)

		case "country":

			out.Values[i] = ec._User_country(ctx, field, obj)

		case "contacts":

			out.Values[i] = ec._User_contacts(ctx, field, obj)

		case "wallet":

			out.Values[i] = ec._User_wallet(ctx, field, obj)

		case "currency":

			out.Values[i] = ec._User_currency(ctx, field, obj)

		case "birth_date":

			out.Values[i] = ec._User_birth_date(ctx, field, obj)

		case "notificationPermission":

			out.Values[i] = ec._User_notificationPermission(ctx, field, obj)

		case "fee":

			out.Values[i] = ec._User_fee(ctx, field, obj)

		case "is_online":

			out.Values[i] = ec._User_is_online(ctx, field, obj)

		case "indentityStatus":

			out.Values[i] = ec._User_indentityStatus(ctx, field, obj)

		case "residenceProofStatus":

			out.Values[i] = ec._User_residenceProofStatus(ctx, field, obj)

		case "default_method":

			out.Values[i] = ec._User_default_method(ctx, field, obj)

		case "keypair":

			out.Values[i] = ec._User_keypair(ctx, field, obj)

		case "deleted":

			out.Values[i] = ec._User_deleted(ctx, field, obj)

		case "pinCode":

			out.Values[i] = ec._User_pinCode(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCreatedImplementors = []string{"UserCreated"}

func (ec *executionContext) _UserCreated(ctx context.Context, sel ast.SelectionSet, obj *model.UserCreated) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCreatedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCreated")
		case "user":

			out.Values[i] = ec._UserCreated_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customToken":

			out.Values[i] = ec._UserCreated_customToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSmallImplementors = []string{"UserSmall", "QRCodeOwner"}

func (ec *executionContext) _UserSmall(ctx context.Context, sel ast.SelectionSet, obj *model.UserSmall) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSmallImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSmall")
		case "_id":

			out.Values[i] = ec._UserSmall__id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "first_name":

			out.Values[i] = ec._UserSmall_first_name(ctx, field, obj)

		case "last_name":

			out.Values[i] = ec._UserSmall_last_name(ctx, field, obj)

		case "photoUrl":

			out.Values[i] = ec._UserSmall_photoUrl(ctx, field, obj)

		case "keypair":

			out.Values[i] = ec._UserSmall_keypair(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var walletImplementors = []string{"Wallet"}

func (ec *executionContext) _Wallet(ctx context.Context, sel ast.SelectionSet, obj *model.Wallet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, walletImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Wallet")
		case "address":

			out.Values[i] = ec._Wallet_address(ctx, field, obj)

		case "amount":

			out.Values[i] = ec._Wallet_amount(ctx, field, obj)

		case "isFrozen":

			out.Values[i] = ec._Wallet_isFrozen(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAdressInput2ᚖserverᚋgraphᚋmodelᚐAdressInput(ctx context.Context, v interface{}) (*model.AdressInput, error) {
	res, err := ec.unmarshalInputAdressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgency2ᚕᚖserverᚋgraphᚋmodelᚐAgencyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Agency) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgency2ᚖserverᚋgraphᚋmodelᚐAgency(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAgency2ᚖserverᚋgraphᚋmodelᚐAgency(ctx context.Context, sel ast.SelectionSet, v *model.Agency) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Agency(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAgencyInpyt2serverᚋgraphᚋmodelᚐAgencyInpyt(ctx context.Context, v interface{}) (model.AgencyInpyt, error) {
	res, err := ec.unmarshalInputAgencyInpyt(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBirthDate2ᚖserverᚋgraphᚋmodelᚐBirthDate(ctx context.Context, v interface{}) (*model.BirthDate, error) {
	res, err := ec.unmarshalInputBirthDate(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNChartData2serverᚋgraphᚋmodelᚐChartData(ctx context.Context, sel ast.SelectionSet, v model.ChartData) graphql.Marshaler {
	return ec._ChartData(ctx, sel, &v)
}

func (ec *executionContext) marshalNChartData2ᚖserverᚋgraphᚋmodelᚐChartData(ctx context.Context, sel ast.SelectionSet, v *model.ChartData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChartData(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterprise2serverᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v model.Enterprise) graphql.Marshaler {
	return ec._Enterprise(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v []*model.Enterprise) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model.Enterprise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseInput2serverᚋgraphᚋmodelᚐEnterpriseInput(ctx context.Context, v interface{}) (model.EnterpriseInput, error) {
	res, err := ec.unmarshalInputEnterpriseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseType2serverᚋgraphᚋmodelᚐEnterpriseType(ctx context.Context, v interface{}) (model.EnterpriseType, error) {
	var res model.EnterpriseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseType2serverᚋgraphᚋmodelᚐEnterpriseType(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNNotification2ᚕᚖserverᚋgraphᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v []*model.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONotification2ᚖserverᚋgraphᚋmodelᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOwnerRule2ᚕᚖserverᚋgraphᚋmodelᚐOwnerRuleᚄ(ctx context.Context, v interface{}) ([]*model.OwnerRule, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OwnerRule, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOwnerRule2ᚖserverᚋgraphᚋmodelᚐOwnerRule(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNOwnerRule2ᚖserverᚋgraphᚋmodelᚐOwnerRule(ctx context.Context, v interface{}) (*model.OwnerRule, error) {
	res, err := ec.unmarshalInputOwnerRule(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaiement2serverᚋgraphᚋmodelᚐPaiement(ctx context.Context, sel ast.SelectionSet, v model.Paiement) graphql.Marshaler {
	return ec._Paiement(ctx, sel, &v)
}

func (ec *executionContext) marshalNPaiement2ᚕᚖserverᚋgraphᚋmodelᚐPaiement(ctx context.Context, sel ast.SelectionSet, v []*model.Paiement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx context.Context, sel ast.SelectionSet, v *model.Paiement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Paiement(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaymentStatus2serverᚋgraphᚋmodelᚐPaymentStatus(ctx context.Context, v interface{}) (model.PaymentStatus, error) {
	var res model.PaymentStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentStatus2serverᚋgraphᚋmodelᚐPaymentStatus(ctx context.Context, sel ast.SelectionSet, v model.PaymentStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPaymentType2serverᚋgraphᚋmodelᚐPaymentType(ctx context.Context, v interface{}) (model.PaymentType, error) {
	var res model.PaymentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPaymentType2serverᚋgraphᚋmodelᚐPaymentType(ctx context.Context, sel ast.SelectionSet, v model.PaymentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPerson2ᚖserverᚋgraphᚋmodelᚐPerson(ctx context.Context, sel ast.SelectionSet, v *model.Person) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Person(ctx, sel, v)
}

func (ec *executionContext) marshalNQRCodeOwner2serverᚋgraphᚋmodelᚐQRCodeOwner(ctx context.Context, sel ast.SelectionSet, v model.QRCodeOwner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QRCodeOwner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTopUpInput2serverᚋgraphᚋmodelᚐTopUpInput(ctx context.Context, v interface{}) (model.TopUpInput, error) {
	res, err := ec.unmarshalInputTopUpInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTransactionWithPageInfo2serverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx context.Context, sel ast.SelectionSet, v model.TransactionWithPageInfo) graphql.Marshaler {
	return ec._TransactionWithPageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNTransactionWithPageInfo2ᚖserverᚋgraphᚋmodelᚐTransactionWithPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.TransactionWithPageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionWithPageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2serverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖserverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserCreated2serverᚋgraphᚋmodelᚐUserCreated(ctx context.Context, sel ast.SelectionSet, v model.UserCreated) graphql.Marshaler {
	return ec._UserCreated(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserCreated2ᚖserverᚋgraphᚋmodelᚐUserCreated(ctx context.Context, sel ast.SelectionSet, v *model.UserCreated) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserCreated(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSmall2ᚕᚖserverᚋgraphᚋmodelᚐUserSmall(ctx context.Context, sel ast.SelectionSet, v []*model.UserSmall) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNWallet2serverᚋgraphᚋmodelᚐWallet(ctx context.Context, sel ast.SelectionSet, v model.Wallet) graphql.Marshaler {
	return ec._Wallet(ctx, sel, &v)
}

func (ec *executionContext) marshalNWallet2ᚖserverᚋgraphᚋmodelᚐWallet(ctx context.Context, sel ast.SelectionSet, v *model.Wallet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Wallet(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWithdrawInput2serverᚋgraphᚋmodelᚐWithdrawInput(ctx context.Context, v interface{}) (model.WithdrawInput, error) {
	res, err := ec.unmarshalInputWithdrawInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAdress2ᚕᚖserverᚋgraphᚋmodelᚐAdress(ctx context.Context, sel ast.SelectionSet, v []*model.Adress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdress2ᚖserverᚋgraphᚋmodelᚐAdress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAdress2ᚖserverᚋgraphᚋmodelᚐAdress(ctx context.Context, sel ast.SelectionSet, v *model.Adress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Adress(ctx, sel, v)
}

func (ec *executionContext) marshalOAgency2ᚖserverᚋgraphᚋmodelᚐAgency(ctx context.Context, sel ast.SelectionSet, v *model.Agency) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Agency(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAgencyOpenStatus2ᚖserverᚋgraphᚋmodelᚐAgencyOpenStatus(ctx context.Context, v interface{}) (*model.AgencyOpenStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AgencyOpenStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAgencyOpenStatus2ᚖserverᚋgraphᚋmodelᚐAgencyOpenStatus(ctx context.Context, sel ast.SelectionSet, v *model.AgencyOpenStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAuthStrategy2ᚖserverᚋgraphᚋmodelᚐAuthStrategy(ctx context.Context, v interface{}) (*model.AuthStrategy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AuthStrategy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthStrategy2ᚖserverᚋgraphᚋmodelᚐAuthStrategy(ctx context.Context, sel ast.SelectionSet, v *model.AuthStrategy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOBirthDateOut2ᚖserverᚋgraphᚋmodelᚐBirthDateOut(ctx context.Context, sel ast.SelectionSet, v *model.BirthDateOut) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BirthDateOut(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOEmailInput2ᚖserverᚋgraphᚋmodelᚐEmailInput(ctx context.Context, v interface{}) (*model.EmailInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterprise2ᚕᚖserverᚋgraphᚋmodelᚐEnterpriseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEnterprise2ᚖserverᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseSmall2ᚖserverᚋgraphᚋmodelᚐEnterpriseSmall(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseSmall) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseSmall(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v interface{}) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOIdentityStatus2ᚖserverᚋgraphᚋmodelᚐIdentityStatus(ctx context.Context, v interface{}) (*model.IdentityStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.IdentityStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIdentityStatus2ᚖserverᚋgraphᚋmodelᚐIdentityStatus(ctx context.Context, sel ast.SelectionSet, v *model.IdentityStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOKeypair2ᚖserverᚋgraphᚋmodelᚐKeypair(ctx context.Context, sel ast.SelectionSet, v *model.Keypair) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Keypair(ctx, sel, v)
}

func (ec *executionContext) unmarshalOKeypairInput2ᚖserverᚋgraphᚋmodelᚐKeypairInput(ctx context.Context, v interface{}) (*model.KeypairInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputKeypairInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLocation2ᚖserverᚋgraphᚋmodelᚐLocation(ctx context.Context, sel ast.SelectionSet, v *model.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLocationInput2ᚖserverᚋgraphᚋmodelᚐLocationInput(ctx context.Context, v interface{}) (*model.LocationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLocationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOModelOperation2ᚕᚖserverᚋgraphᚋmodelᚐModelOperation(ctx context.Context, v interface{}) ([]*model.ModelOperation, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ModelOperation, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOModelOperation2ᚖserverᚋgraphᚋmodelᚐModelOperation(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOModelOperation2ᚕᚖserverᚋgraphᚋmodelᚐModelOperation(ctx context.Context, sel ast.SelectionSet, v []*model.ModelOperation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModelOperation2ᚖserverᚋgraphᚋmodelᚐModelOperation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOModelOperation2ᚖserverᚋgraphᚋmodelᚐModelOperation(ctx context.Context, v interface{}) (*model.ModelOperation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ModelOperation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelOperation2ᚖserverᚋgraphᚋmodelᚐModelOperation(ctx context.Context, sel ast.SelectionSet, v *model.ModelOperation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONotification2ᚖserverᚋgraphᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v *model.Notification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) marshalOPaiement2ᚖserverᚋgraphᚋmodelᚐPaiement(ctx context.Context, sel ast.SelectionSet, v *model.Paiement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Paiement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentType2ᚖserverᚋgraphᚋmodelᚐPaymentType(ctx context.Context, v interface{}) (*model.PaymentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PaymentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentType2ᚖserverᚋgraphᚋmodelᚐPaymentType(ctx context.Context, sel ast.SelectionSet, v *model.PaymentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPersonInput2ᚖserverᚋgraphᚋmodelᚐPersonInput(ctx context.Context, v interface{}) (*model.PersonInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPersonInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORatingUser2ᚖserverᚋgraphᚋmodelᚐRatingUser(ctx context.Context, sel ast.SelectionSet, v *model.RatingUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RatingUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalOResidenceProofStatus2ᚖserverᚋgraphᚋmodelᚐResidenceProofStatus(ctx context.Context, v interface{}) (*model.ResidenceProofStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ResidenceProofStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResidenceProofStatus2ᚖserverᚋgraphᚋmodelᚐResidenceProofStatus(ctx context.Context, sel ast.SelectionSet, v *model.ResidenceProofStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORole2ᚕᚖserverᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) ([]*model.Role, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORole2ᚕᚖserverᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v []*model.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (*model.Role, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Role)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2ᚖserverᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v *model.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖserverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserInput2ᚖserverᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (*model.UserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserSmall2ᚖserverᚋgraphᚋmodelᚐUserSmall(ctx context.Context, sel ast.SelectionSet, v *model.UserSmall) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserSmall(ctx, sel, v)
}

func (ec *executionContext) marshalOWallet2ᚖserverᚋgraphᚋmodelᚐWallet(ctx context.Context, sel ast.SelectionSet, v *model.Wallet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Wallet(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
