// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type QRCodeOwner interface {
	IsQRCodeOwner()
}

type Adress struct {
	Title    *string   `json:"title" bson:"title"`
	Location *Location `json:"location" bson:"location"`
	IsChosed *bool     `json:"is_chosed" bson:"is_chosed"`
}

type AdressInput struct {
	Title    *string        `json:"title" bson:"title"`
	Location *LocationInput `json:"location" bson:"location"`
	IsChosed *bool          `json:"is_chosed" bson:"is_chosed"`
	City     *string        `json:"city" bson:"city"`
}

type Agency struct {
	ID        *string           `json:"_id" bson:"_id"`
	Title     *string           `json:"title" bson:"title"`
	Address   *string           `json:"address" bson:"address"`
	Status    *AgencyOpenStatus `json:"status" bson:"status"`
	CreatedAt *string           `json:"createdAt" bson:"createdAt"`
	City      *string           `json:"city" bson:"city"`
	Country   *string           `json:"country" bson:"country"`
}

type AgencyInpyt struct {
	Title   string `json:"title" bson:"title"`
	Address string `json:"address" bson:"address"`
	City    string `json:"city" bson:"city"`
	Country string `json:"country" bson:"country"`
	Token   string `json:"token" bson:"token"`
}

type BirthDate struct {
	Day   int    `json:"day" bson:"day"`
	Month int    `json:"month" bson:"month"`
	Year  int    `json:"year" bson:"year"`
	Iso   string `json:"iso" bson:"iso"`
}

type BirthDateOut struct {
	Day   int    `json:"day" bson:"day"`
	Month int    `json:"month" bson:"month"`
	Year  int    `json:"year" bson:"year"`
	Iso   string `json:"iso" bson:"iso"`
}

type ChartData struct {
	CurrentTotal          *float64   `json:"currentTotal" bson:"currentTotal"`
	FormerTotal           *float64   `json:"formerTotal" bson:"formerTotal"`
	PourcentageDifference *float64   `json:"pourcentageDifference" bson:"pourcentageDifference"`
	IsPositive            *bool      `json:"isPositive" bson:"isPositive"`
	Chart                 []*float64 `json:"chart" bson:"chart"`
}

type EmailInput struct {
	Name    string `json:"name" bson:"name"`
	Email   string `json:"email" bson:"email"`
	Message string `json:"message" bson:"message"`
}

type Enterprise struct {
	ID                   string  `json:"_id" bson:"_id"`
	Type                 *string `json:"type" bson:"type"`
	Name                 *string `json:"name" bson:"name"`
	Website              *string `json:"website" bson:"website"`
	LogoURL              *string `json:"logoUrl" bson:"logoUrl"`
	Creator              string  `json:"creator" bson:"creator"`
	CreatedAt            string  `json:"createdAt" bson:"createdAt"`
	UpdatedAt            *string `json:"updatedAt" bson:"updatedAt"`
	Person               *Person `json:"person" bson:"person"`
	PublishableKey       string  `json:"publishableKey" bson:"publishableKey"`
	PrivateKey           string  `json:"private_key" bson:"private_key"`
	WalletPublicKey      string  `json:"walletPublicKey" bson:"walletPublicKey"`
	WalletSecretKey      *string `json:"walletSecretKey" bson:"walletSecretKey"`
	Country              *string `json:"country" bson:"country"`
	Address              *Adress `json:"address" bson:"address"`
	DefaultEnterprise    bool    `json:"default_enterprise" bson:"default_enterprise"`
	Description          *string `json:"description" bson:"description"`
	SellingPhysicalGoods *bool   `json:"sellingPhysicalGoods" bson:"sellingPhysicalGoods"`
	SelfShippingProduct  *bool   `json:"selfShippingProduct" bson:"selfShippingProduct"`
	ShippingDelay        *string `json:"shippingDelay" bson:"shippingDelay"`
	TransactionLibele    *string `json:"transactionLibele" bson:"transactionLibele"`
	AbregedLibele        *string `json:"abregedLibele" bson:"abregedLibele"`
	Phone                *string `json:"phone" bson:"phone"`
	Email                *string `json:"email" bson:"email"`
	Rccm                 *string `json:"rccm" bson:"rccm"`
	Sector               *string `json:"sector" bson:"sector"`
}

type EnterpriseInput struct {
	Name                 string         `json:"name" bson:"name"`
	Country              string         `json:"country" bson:"country"`
	Address              *AdressInput   `json:"address" bson:"address"`
	LogoURL              *string        `json:"logoUrl" bson:"logoUrl"`
	Website              *string        `json:"website" bson:"website"`
	Type                 EnterpriseType `json:"type" bson:"type"`
	Rccm                 string         `json:"rccm" bson:"rccm"`
	ActivitySector       string         `json:"activitySector" bson:"activitySector"`
	Person               *PersonInput   `json:"person" bson:"person"`
	Description          *string        `json:"description" bson:"description"`
	SellingPhysicalGoods *bool          `json:"sellingPhysicalGoods" bson:"sellingPhysicalGoods"`
	SelfShippingProduct  *bool          `json:"selfShippingProduct" bson:"selfShippingProduct"`
	ShippingDelay        *string        `json:"shippingDelay" bson:"shippingDelay"`
	TransactionLibele    string         `json:"transactionLibele" bson:"transactionLibele"`
	AbregedLibele        string         `json:"abregedLibele" bson:"abregedLibele"`
	Phone                string         `json:"phone" bson:"phone"`
	Email                string         `json:"email" bson:"email"`
}

type EnterpriseSmall struct {
	ID              string  `json:"_id" bson:"_id"`
	Name            *string `json:"name" bson:"name"`
	Website         *string `json:"website" bson:"website"`
	LogoURL         *string `json:"logoUrl" bson:"logoUrl"`
	WalletPublicKey string  `json:"walletPublicKey" bson:"walletPublicKey"`
	Country         *string `json:"country" bson:"country"`
	Address         *Adress `json:"address" bson:"address"`
}

func (EnterpriseSmall) IsQRCodeOwner() {}

type File struct {
	Filename string `json:"filename" bson:"filename"`
	Mimetype string `json:"mimetype" bson:"mimetype"`
	Encoding string `json:"encoding" bson:"encoding"`
}

type Keypair struct {
	PublicKey string `json:"publicKey" bson:"publicKey"`
	SecretKey string `json:"secretKey" bson:"secretKey"`
}

type KeypairInput struct {
	PublicKey *string `json:"publicKey" bson:"publicKey"`
	SecretKey *string `json:"secretKey" bson:"secretKey"`
}

type Location struct {
	Latitude  *float64 `json:"latitude" bson:"latitude"`
	Longitude *float64 `json:"longitude" bson:"longitude"`
}

type LocationInput struct {
	Latitude  *float64 `json:"latitude" bson:"latitude"`
	Longitude *float64 `json:"longitude" bson:"longitude"`
}

type OwnerRule struct {
	Allow      *AuthStrategy     `json:"allow" bson:"allow"`
	OwnerField *string           `json:"ownerField" bson:"ownerField"`
	Operations []*ModelOperation `json:"operations" bson:"operations"`
}

type Person struct {
	FirstName *string `json:"first_name" bson:"first_name"`
	LastName  *string `json:"last_name" bson:"last_name"`
	Email     *string `json:"email" bson:"email"`
	Address   *string `json:"address" bson:"address"`
	City      *string `json:"city" bson:"city"`
	Zip       *string `json:"zip" bson:"zip"`
	State     *string `json:"state" bson:"state"`
}

type PersonInput struct {
	FirstName string  `json:"first_name" bson:"first_name"`
	LastName  string  `json:"last_name" bson:"last_name"`
	Email     string  `json:"email" bson:"email"`
	Address   string  `json:"address" bson:"address"`
	City      string  `json:"city" bson:"city"`
	Zip       *string `json:"zip" bson:"zip"`
	State     *string `json:"state" bson:"state"`
}

type RatingInsideInput struct {
	RatingCount *int     `json:"rating_count" bson:"rating_count"`
	RatingTotal *float64 `json:"rating_total" bson:"rating_total"`
}

type RatingUser struct {
	RatingTotal *float64 `json:"rating_total" bson:"rating_total"`
	RatingCount *int     `json:"rating_count" bson:"rating_count"`
}

type TopUpInput struct {
	Amount          float64 `json:"amount" bson:"amount"`
	Agency          string  `json:"agency" bson:"agency"`
	Token           string  `json:"token" bson:"token"`
	Destination     string  `json:"destination" bson:"destination"`
	DestinationUser string  `json:"destinationUser" bson:"destinationUser"`
}

type TransactionWithPageInfo struct {
	Transactions []*Paiement `json:"transactions" bson:"transactions"`
	PageTotal    *float64    `json:"pageTotal" bson:"pageTotal"`
}

type User struct {
	ID                     string                `json:"_id" bson:"_id"`
	FirebaseUID            *string               `json:"firebaseUID" bson:"firebaseUID"`
	Email                  *string               `json:"email" bson:"email"`
	FirstName              *string               `json:"first_name" bson:"first_name"`
	LastName               *string               `json:"last_name" bson:"last_name"`
	Phonenumber            *string               `json:"phonenumber" bson:"phonenumber"`
	CreatedAt              *string               `json:"createdAt" bson:"createdAt"`
	PhotoURL               *string               `json:"photoUrl" bson:"photoUrl"`
	UpdatedAt              *string               `json:"updatedAt" bson:"updatedAt"`
	DefaultCurrency        *string               `json:"defaultCurrency" bson:"defaultCurrency"`
	Adresses               []*Adress             `json:"adresses" bson:"adresses"`
	FcmToken               *string               `json:"fcmToken" bson:"fcmToken"`
	Rating                 *RatingUser           `json:"rating" bson:"rating"`
	Permissions            []*Role               `json:"permissions" bson:"permissions"`
	Country                *string               `json:"country" bson:"country"`
	Contacts               []*string             `json:"contacts" bson:"contacts"`
	Wallet                 *Wallet               `json:"wallet" bson:"wallet"`
	Currency               *string               `json:"currency" bson:"currency"`
	BirthDate              *BirthDateOut         `json:"birth_date" bson:"birth_date"`
	NotificationPermission *bool                 `json:"notificationPermission" bson:"notificationPermission"`
	Fee                    *int                  `json:"fee" bson:"fee"`
	IsOnline               *bool                 `json:"is_online" bson:"is_online"`
	IndentityStatus        *IdentityStatus       `json:"indentityStatus" bson:"indentityStatus"`
	ResidenceProofStatus   *ResidenceProofStatus `json:"residenceProofStatus" bson:"residenceProofStatus"`
	DefaultMethod          *string               `json:"default_method" bson:"default_method"`
	Keypair                *Keypair              `json:"keypair" bson:"keypair"`
	Deleted                *bool                 `json:"deleted" bson:"deleted"`
	PinCode                *string               `json:"pinCode"`
}

type UserCreated struct {
	User        *User  `json:"user" bson:"user"`
	CustomToken string `json:"customToken" bson:"customToken"`
}

type UserInput struct {
	Adress                *AdressInput  `json:"adress" bson:"adress"`
	DisplayName           *string       `json:"display_name" bson:"display_name"`
	Email                 string        `json:"email" bson:"email"`
	FirstName             string        `json:"first_name" bson:"first_name"`
	LastName              string        `json:"last_name" bson:"last_name"`
	Phonenumber           string        `json:"phonenumber" bson:"phonenumber"`
	PhotoURL              *string       `json:"photoUrl" bson:"photoUrl"`
	Website               *string       `json:"website" bson:"website"`
	FirebaseUID           *string       `json:"firebaseUID" bson:"firebaseUID"`
	Country               string        `json:"country" bson:"country"`
	BirthDate             *BirthDate    `json:"birth_date" bson:"birth_date"`
	FcmToken              *string       `json:"fcmToken" bson:"fcmToken"`
	Age                   *int          `json:"age" bson:"age"`
	FullDocumentImage     *string       `json:"fullDocumentImage" bson:"fullDocumentImage"`
	PersonalIDNumber      *string       `json:"personalIdNumber" bson:"personalIdNumber"`
	FaceImage             *string       `json:"faceImage" bson:"faceImage"`
	PlaceOfBirth          *string       `json:"placeOfBirth" bson:"placeOfBirth"`
	Sex                   *string       `json:"sex" bson:"sex"`
	Race                  *string       `json:"race" bson:"race"`
	Nationality           *string       `json:"nationality" bson:"nationality"`
	Expired               *bool         `json:"expired" bson:"expired"`
	DocumentNumber        *string       `json:"documentNumber" bson:"documentNumber"`
	DateOfExpiryPermanent *bool         `json:"dateOfExpiryPermanent" bson:"dateOfExpiryPermanent"`
	DateOfIssue           *string       `json:"dateOfIssue" bson:"dateOfIssue"`
	DateOfExpiry          *string       `json:"dateOfExpiry" bson:"dateOfExpiry"`
	PinCode               string        `json:"pinCode"`
	InvitedBy             *string       `json:"invitedBy" bson:"invitedBy"`
	Keypair               *KeypairInput `json:"keypair" bson:"keypair"`
	CreatedAt             *string       `json:"createdAt" bson:"createdAt"`
	UpdatedAt             *string       `json:"updatedAt" bson:"updatedAt"`
	Token                 string        `json:"token" bson:"token"`
	Password              string        `json:"password" bson:"password"`
}

type UserSmall struct {
	ID        string   `json:"_id" bson:"_id"`
	FirstName *string  `json:"first_name" bson:"first_name"`
	LastName  *string  `json:"last_name" bson:"last_name"`
	PhotoURL  *string  `json:"photoUrl" bson:"photoUrl"`
	Keypair   *Keypair `json:"keypair" bson:"keypair"`
}

func (UserSmall) IsQRCodeOwner() {}

type Wallet struct {
	Address  *string  `json:"address" bson:"address"`
	Amount   *float64 `json:"amount" bson:"amount"`
	IsFrozen *bool    `json:"isFrozen" bson:"isFrozen"`
}

type WithdrawInput struct {
	Amount          float64 `json:"amount" bson:"amount"`
	Agency          string  `json:"agency" bson:"agency"`
	Token           string  `json:"token" bson:"token"`
	Destination     string  `json:"destination" bson:"destination"`
	DestinationUser string  `json:"destinationUser" bson:"destinationUser"`
}

type AgencyOpenStatus string

const (
	AgencyOpenStatusOpen             AgencyOpenStatus = "OPEN"
	AgencyOpenStatusClosed           AgencyOpenStatus = "CLOSED"
	AgencyOpenStatusClosedDefinitely AgencyOpenStatus = "CLOSED_DEFINITELY"
)

var AllAgencyOpenStatus = []AgencyOpenStatus{
	AgencyOpenStatusOpen,
	AgencyOpenStatusClosed,
	AgencyOpenStatusClosedDefinitely,
}

func (e AgencyOpenStatus) IsValid() bool {
	switch e {
	case AgencyOpenStatusOpen, AgencyOpenStatusClosed, AgencyOpenStatusClosedDefinitely:
		return true
	}
	return false
}

func (e AgencyOpenStatus) String() string {
	return string(e)
}

func (e *AgencyOpenStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgencyOpenStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgencyOpenStatus", str)
	}
	return nil
}

func (e AgencyOpenStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthStrategy string

const (
	AuthStrategyOwner   AuthStrategy = "owner"
	AuthStrategyGroups  AuthStrategy = "groups"
	AuthStrategyPrivate AuthStrategy = "private"
	AuthStrategyPublic  AuthStrategy = "public"
)

var AllAuthStrategy = []AuthStrategy{
	AuthStrategyOwner,
	AuthStrategyGroups,
	AuthStrategyPrivate,
	AuthStrategyPublic,
}

func (e AuthStrategy) IsValid() bool {
	switch e {
	case AuthStrategyOwner, AuthStrategyGroups, AuthStrategyPrivate, AuthStrategyPublic:
		return true
	}
	return false
}

func (e AuthStrategy) String() string {
	return string(e)
}

func (e *AuthStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthStrategy", str)
	}
	return nil
}

func (e AuthStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseType string

const (
	EnterpriseTypeIndividual EnterpriseType = "INDIVIDUAL"
	EnterpriseTypeCompany    EnterpriseType = "COMPANY"
	EnterpriseTypeOng        EnterpriseType = "ONG"
)

var AllEnterpriseType = []EnterpriseType{
	EnterpriseTypeIndividual,
	EnterpriseTypeCompany,
	EnterpriseTypeOng,
}

func (e EnterpriseType) IsValid() bool {
	switch e {
	case EnterpriseTypeIndividual, EnterpriseTypeCompany, EnterpriseTypeOng:
		return true
	}
	return false
}

func (e EnterpriseType) String() string {
	return string(e)
}

func (e *EnterpriseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseType", str)
	}
	return nil
}

func (e EnterpriseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IdentityStatus string

const (
	IdentityStatusNotUploaded IdentityStatus = "NOT_UPLOADED"
	IdentityStatusUploaded    IdentityStatus = "UPLOADED"
	IdentityStatusVerified    IdentityStatus = "VERIFIED"
	IdentityStatusRefused     IdentityStatus = "REFUSED"
)

var AllIdentityStatus = []IdentityStatus{
	IdentityStatusNotUploaded,
	IdentityStatusUploaded,
	IdentityStatusVerified,
	IdentityStatusRefused,
}

func (e IdentityStatus) IsValid() bool {
	switch e {
	case IdentityStatusNotUploaded, IdentityStatusUploaded, IdentityStatusVerified, IdentityStatusRefused:
		return true
	}
	return false
}

func (e IdentityStatus) String() string {
	return string(e)
}

func (e *IdentityStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentityStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentityStatus", str)
	}
	return nil
}

func (e IdentityStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ModelOperation string

const (
	ModelOperationCreate ModelOperation = "create"
	ModelOperationUpdate ModelOperation = "update"
	ModelOperationDelete ModelOperation = "delete"
	ModelOperationRead   ModelOperation = "read"
)

var AllModelOperation = []ModelOperation{
	ModelOperationCreate,
	ModelOperationUpdate,
	ModelOperationDelete,
	ModelOperationRead,
}

func (e ModelOperation) IsValid() bool {
	switch e {
	case ModelOperationCreate, ModelOperationUpdate, ModelOperationDelete, ModelOperationRead:
		return true
	}
	return false
}

func (e ModelOperation) String() string {
	return string(e)
}

func (e *ModelOperation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModelOperation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModelOperation", str)
	}
	return nil
}

func (e ModelOperation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusFinalized            PaymentStatus = "FINALIZED"
	PaymentStatusOngoing              PaymentStatus = "ONGOING"
	PaymentStatusRefunded             PaymentStatus = "REFUNDED"
	PaymentStatusInProgress           PaymentStatus = "IN_PROGRESS"
	PaymentStatusCancelled            PaymentStatus = "CANCELLED"
	PaymentStatusDone                 PaymentStatus = "DONE"
	PaymentStatusFailed               PaymentStatus = "FAILED"
	PaymentStatusCancelledUser        PaymentStatus = "CANCELLED_USER"
	PaymentStatusCancelledAgent       PaymentStatus = "CANCELLED_AGENT"
	PaymentStatusRequiresPaiement     PaymentStatus = "REQUIRES_PAIEMENT"
	PaymentStatusRequiresConfirmation PaymentStatus = "REQUIRES_CONFIRMATION"
	PaymentStatusRequiresAction       PaymentStatus = "REQUIRES_ACTION"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusFinalized,
	PaymentStatusOngoing,
	PaymentStatusRefunded,
	PaymentStatusInProgress,
	PaymentStatusCancelled,
	PaymentStatusDone,
	PaymentStatusFailed,
	PaymentStatusCancelledUser,
	PaymentStatusCancelledAgent,
	PaymentStatusRequiresPaiement,
	PaymentStatusRequiresConfirmation,
	PaymentStatusRequiresAction,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusFinalized, PaymentStatusOngoing, PaymentStatusRefunded, PaymentStatusInProgress, PaymentStatusCancelled, PaymentStatusDone, PaymentStatusFailed, PaymentStatusCancelledUser, PaymentStatusCancelledAgent, PaymentStatusRequiresPaiement, PaymentStatusRequiresConfirmation, PaymentStatusRequiresAction:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentType string

const (
	PaymentTypePaiement  PaymentType = "PAIEMENT"
	PaymentTypeTransfert PaymentType = "TRANSFERT"
	PaymentTypeTopup     PaymentType = "TOPUP"
	PaymentTypeWithdraw  PaymentType = "WITHDRAW"
	PaymentTypeCommerce  PaymentType = "COMMERCE"
)

var AllPaymentType = []PaymentType{
	PaymentTypePaiement,
	PaymentTypeTransfert,
	PaymentTypeTopup,
	PaymentTypeWithdraw,
	PaymentTypeCommerce,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypePaiement, PaymentTypeTransfert, PaymentTypeTopup, PaymentTypeWithdraw, PaymentTypeCommerce:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportStatus string

const (
	ReportStatusPending   ReportStatus = "PENDING"
	ReportStatusReviewing ReportStatus = "REVIEWING"
	ReportStatusProcessed ReportStatus = "PROCESSED"
)

var AllReportStatus = []ReportStatus{
	ReportStatusPending,
	ReportStatusReviewing,
	ReportStatusProcessed,
}

func (e ReportStatus) IsValid() bool {
	switch e {
	case ReportStatusPending, ReportStatusReviewing, ReportStatusProcessed:
		return true
	}
	return false
}

func (e ReportStatus) String() string {
	return string(e)
}

func (e *ReportStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportStatus", str)
	}
	return nil
}

func (e ReportStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResidenceProofStatus string

const (
	ResidenceProofStatusNotUploaded ResidenceProofStatus = "NOT_UPLOADED"
	ResidenceProofStatusUploaded    ResidenceProofStatus = "UPLOADED"
	ResidenceProofStatusVerified    ResidenceProofStatus = "VERIFIED"
	ResidenceProofStatusRefused     ResidenceProofStatus = "REFUSED"
)

var AllResidenceProofStatus = []ResidenceProofStatus{
	ResidenceProofStatusNotUploaded,
	ResidenceProofStatusUploaded,
	ResidenceProofStatusVerified,
	ResidenceProofStatusRefused,
}

func (e ResidenceProofStatus) IsValid() bool {
	switch e {
	case ResidenceProofStatusNotUploaded, ResidenceProofStatusUploaded, ResidenceProofStatusVerified, ResidenceProofStatusRefused:
		return true
	}
	return false
}

func (e ResidenceProofStatus) String() string {
	return string(e)
}

func (e *ResidenceProofStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResidenceProofStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResidenceProofStatus", str)
	}
	return nil
}

func (e ResidenceProofStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin         Role = "ADMIN"
	RoleReviewer      Role = "REVIEWER"
	RoleUser          Role = "USER"
	RolePauserRole    Role = "PAUSER_ROLE"
	RoleMinterRole    Role = "MINTER_ROLE"
	RoleBurnerRole    Role = "BURNER_ROLE"
	RoleFreezeRole    Role = "FREEZE_ROLE"
	RoleAgentRole     Role = "AGENT_ROLE"
	RoleManagmentRole Role = "MANAGMENT_ROLE"
	RoleKycAgent      Role = "KYC_AGENT"
	RoleOwner         Role = "OWNER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleReviewer,
	RoleUser,
	RolePauserRole,
	RoleMinterRole,
	RoleBurnerRole,
	RoleFreezeRole,
	RoleAgentRole,
	RoleManagmentRole,
	RoleKycAgent,
	RoleOwner,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleReviewer, RoleUser, RolePauserRole, RoleMinterRole, RoleBurnerRole, RoleFreezeRole, RoleAgentRole, RoleManagmentRole, RoleKycAgent, RoleOwner:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusBanned       UserStatus = "BANNED"
	UserStatusShadowbanned UserStatus = "SHADOWBANNED"
	UserStatusActiive      UserStatus = "ACTIIVE"
)

var AllUserStatus = []UserStatus{
	UserStatusBanned,
	UserStatusShadowbanned,
	UserStatusActiive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusBanned, UserStatusShadowbanned, UserStatusActiive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
